{
	"info": {
		"_postman_id": "fba21b4b-5715-4531-a3e5-d7e082b3356a",
		"name": "Infinity-API",
		"description": "# About this collection\n\nThe API under this collection includes four artifacts **{Environment, Flight, Motor and Rocket}** with 6 endpoints each covering artifact **creation, reading, editing, deleting, simulating and retrieving artifact as jsonpickle string.**\n\n- POST `api/artifact/{{artifact_id}}` { message, artifact_id }\n    \n- GET `api/artifact/{{artifact_id}}` { Artifact }\n    \n- GET `api/rocketpy/artifact/{{artifact_id}}` { json_pickle_string_artifact }\n    \n- GET `api/simulate/artifact/{{artifact_id}}` { ArtifactSimulationSummary }\n    \n- PUT `api/artifact/{{artifact_id}}` { message, new_artifact_id }\n    \n- DELETE `api/artifact/{{artifact_id}}` { deleted_artifact_id, message }\n    \n\n**Flight artifact** have also additional routes that allows to update its own artifacts.\n\n- POST `api/flight/{{flight_id}}/artifact/` { message, flight_id }\n    \n\n## **Using this collection**\n\n- Run this collection by clicking on \"Run\".\n    \n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"266\" height=\"103\">\n\n## Additional resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Environment",
			"item": [
				{
					"name": "Create Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47bd37ce-b102-47fc-bdf4-35386027bd0e",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var envRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce date for future assert",
									"envRequest.date = envRequest.date.substring(0, envRequest.date.length - 7);",
									"",
									"// save environment parameters",
									"pm.collectionVariables.set('env_id', apiRspn.env_id)        ",
									"pm.collectionVariables.set('latitude', envRequest.latitude)",
									"pm.collectionVariables.set('longitude', envRequest.longitude)",
									"pm.collectionVariables.set('elevation', envRequest.elevation)      ",
									"pm.collectionVariables.set('atmospheric_model_type', envRequest.atmospheric_model_type)    ",
									"pm.collectionVariables.set('atmospheric_model_file', envRequest.atmospheric_model_file)            ",
									"pm.collectionVariables.set('date', envRequest.date)        ",
									"",
									"//TEST",
									"bdd = \"Given a valid environment POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid env_id\", function () {",
									"        pm.expect(apiRspn.env_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c692d9c7-cdce-4a4d-b59d-d72e38b3c8b4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3603f68a-9df8-45f2-9d99-1491fcce47e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"elevation\": 1400,\n    \"atmospheric_model_type\": \"standard_atmosphere\",\n    \"atmospheric_model_file\": \"GFS\",\n    \"date\": \"2023-05-09T16:30:50.065992\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/environments/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2251b1df-4472-4b2c-8fa1-4b10dd5dc86c",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"var returned_date = apiRspn.date;",
									"var reduced_returned_date = returned_date.substring(0, returned_date.length - 7);",
									"",
									"//TEST",
									"bdd = \"Given a valid Environment GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid environment\", function () {",
									"        pm.expect(apiRspn.latitude).to.eql(pm.collectionVariables.get('latitude'), \"latitude not matching\");",
									"        pm.expect(apiRspn.longitude).to.eql(pm.collectionVariables.get('longitude'), \"longitude not matching\");        ",
									"        pm.expect(apiRspn.elevation).to.eql(pm.collectionVariables.get('elevation'), \"elevation not matching\");",
									"        pm.expect(apiRspn.atmospheric_model_type).to.eql(pm.collectionVariables.get('atmospheric_model_type'), \"atmospheric_model_type not matching\");",
									"        pm.expect(apiRspn.atmospheric_model_file).to.eql(pm.collectionVariables.get('atmospheric_model_file'), \"atmospheric_model_file not matching\");",
									"        pm.expect(reduced_returned_date).to.eql(pm.collectionVariables.get('date'), \"date not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "95adaeea-0665-413f-b5b0-156943f92a1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50d84ce5-283a-4a2f-a1ab-cd3de39a9764",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Environment GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_env).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c06c2cfc-ef70-4894-b8c8-92205cc2b197",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/rocketpy/{{env_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd30a158-2a89-4b0a-98fd-912e1451e13d",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Environment simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.env_data).to.exist;        ",
									"        pm.expect(apiRspn.env_data.grav).to.exist;   ",
									"        pm.expect(apiRspn.env_data.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_data.model_type_max_expected_height).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_direction).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_heading).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_pressure).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_temperature).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_air_density).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_speed_of_sound).to.exist;",
									"        pm.expect(apiRspn.env_data.launch_date).to.exist;",
									"        pm.expect(apiRspn.env_data.lat).to.eql(pm.collectionVariables.get('latitude'), \"latitude not matching\");",
									"        pm.expect(apiRspn.env_data.lon).to.eql(pm.collectionVariables.get('longitude'), \"longitude not matching\");        ",
									"        pm.expect(apiRspn.env_data.elevation).to.eql(pm.collectionVariables.get('elevation'), \"elevation not matching\");",
									"        pm.expect(apiRspn.env_data.model_type).to.eql(pm.collectionVariables.get('atmospheric_model_type'), \"atmospheric_model_type not matching\");      ",
									"",
									"        pm.expect(apiRspn.env_plots).to.exist;     ",
									"        pm.expect(apiRspn.env_plots.grid).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_direction).to.exist;",
									"        pm.expect(apiRspn.env_plots.speed_of_sound).to.exist;",
									"        pm.expect(apiRspn.env_plots.density).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_vel_x).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_vel_y).to.exist;",
									"        pm.expect(apiRspn.env_plots.pressure).to.exist;",
									"        pm.expect(apiRspn.env_plots.temperature).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dfc9eaa2-3900-477d-9d80-87fe7ce7f229",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c25c41b5-8419-46c8-ba7b-508c98f8b8db",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var envRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce date for future assert",
									"envRequest.date = envRequest.date.substring(0, envRequest.date.length - 7);",
									"",
									"// save environment parameters",
									"pm.collectionVariables.set('env_id', apiRspn.new_env_id)        ",
									"pm.collectionVariables.set('latitude', envRequest.latitude)",
									"pm.collectionVariables.set('longitude', envRequest.longitude)",
									"pm.collectionVariables.set('elevation', envRequest.elevation)      ",
									"pm.collectionVariables.set('atmospheric_model_type', envRequest.atmospheric_model_type)    ",
									"pm.collectionVariables.set('atmospheric_model_file', envRequest.atmospheric_model_file)            ",
									"pm.collectionVariables.set('date', envRequest.date)        ",
									"",
									"//TEST",
									"bdd = \"Given a valid Environment PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_env_id\", function () {",
									"        pm.expect(apiRspn.new_env_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b261016-41ea-4b28-b3b3-7a35c505e661",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b271645a-5677-4d4e-a967-392edcb63748",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"elevation\": 1400,\n    \"atmospheric_model_type\": \"standard_atmosphere\",\n    \"atmospheric_model_file\": \"GFS\",\n    \"date\": \"2023-05-09T16:30:50.065992\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/environments/{{env_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "671d8091-2ee6-4b8e-9960-5775c2e00992",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Environment DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_env_id).to.eql(pm.collectionVariables.get('env_id'), \"env_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f5ae4d8-ff96-4487-9b7a-41f7c0ffa121",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}"
					},
					"response": []
				}
			],
			"id": "5376d788-5d30-43a0-aa50-fb0b25acb34c"
		},
		{
			"name": "Flight",
			"item": [
				{
					"name": "Create Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9e0f53b-14de-4667-9bba-04df201ddaba",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce environment date for future assertion",
									"flightRequest.environment.date = flightRequest.environment.date.substring(0, flightRequest.environment.date.length - 7);",
									"",
									"// save flight parameters",
									"pm.collectionVariables.set('rail_length', flightRequest.rail_length)        ",
									"pm.collectionVariables.set('inclination', flightRequest.inclination)",
									"pm.collectionVariables.set('heading', flightRequest.heading)",
									"",
									"// flight environment",
									"pm.collectionVariables.set('flight_id', apiRspn.flight_id)        ",
									"pm.collectionVariables.set('latitude', flightRequest.environment.latitude)",
									"pm.collectionVariables.set('longitude', flightRequest.environment.longitude)",
									"pm.collectionVariables.set('elevation', flightRequest.environment.elevation)      ",
									"pm.collectionVariables.set('atmospheric_model_type', flightRequest.environment.atmospheric_model_type)    ",
									"pm.collectionVariables.set('atmospheric_model_file', flightRequest.environment.atmospheric_model_file)            ",
									"pm.collectionVariables.set('date', flightRequest.environment.date)        ",
									"",
									"// flight rocket",
									"pm.collectionVariables.set('radius', flightRequest.rocket.radius)",
									"pm.collectionVariables.set('mass', flightRequest.rocket.mass)",
									"pm.collectionVariables.set('inertia', flightRequest.rocket.inertia)",
									"pm.collectionVariables.set('power_off_drag', flightRequest.rocket.power_off_drag)",
									"pm.collectionVariables.set('power_on_drag', flightRequest.rocket.power_on_drag)",
									"pm.collectionVariables.set('center_of_mass_without_motor', flightRequest.rocket.center_of_mass_without_motor)",
									"pm.collectionVariables.set('motor_position', flightRequest.rocket.motor_position)",
									"pm.collectionVariables.set('rail_buttons', flightRequest.rocket.rail_buttons)",
									"pm.collectionVariables.set('upper_button_position', flightRequest.rocket.rail_buttons.upper_button_position)",
									"pm.collectionVariables.set('lower_button_position', flightRequest.rocket.rail_buttons.lower_button_position)",
									"pm.collectionVariables.set('angular_position', flightRequest.rocket.rail_buttons.angular_position)",
									"pm.collectionVariables.set('rocket_coordinate_system_orientation', flightRequest.rocket.coordinate_system_orientation)",
									"",
									"// flight rocket motor",
									"pm.collectionVariables.set('burn_time', flightRequest.rocket.motor.burn_time)",
									"pm.collectionVariables.set('dry_mass', flightRequest.rocket.motor.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', flightRequest.rocket.motor.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', flightRequest.rocket.motor.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', flightRequest.rocket.motor.grain_number)",
									"pm.collectionVariables.set('grain_density', flightRequest.rocket.motor.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', flightRequest.rocket.motor.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', flightRequest.rocket.motor.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', flightRequest.rocket.motor.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', flightRequest.rocket.motor.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', flightRequest.rocket.motor.grain_separation)",
									"pm.collectionVariables.set('thrust_source', flightRequest.rocket.motor.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', flightRequest.rocket.motor.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', flightRequest.rocket.motor.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', flightRequest.rocket.motor.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', flightRequest.rocket.motor.coordinate_system_orientation)",
									"",
									"// flight rocket nose",
									"pm.collectionVariables.set('nose_length', flightRequest.rocket.nose.length)",
									"pm.collectionVariables.set('kind', flightRequest.rocket.nose.kind)",
									"pm.collectionVariables.set('nose_position', flightRequest.rocket.nose.position)",
									"pm.collectionVariables.set('base_radius', flightRequest.rocket.nose.base_radius)",
									"pm.collectionVariables.set('rocket_radius', flightRequest.rocket.nose.rocket_radius)",
									"",
									"// flight rocket fins",
									"pm.collectionVariables.set('n', flightRequest.rocket.fins.n)",
									"pm.collectionVariables.set('root_chord', flightRequest.rocket.fins.root_chord)",
									"pm.collectionVariables.set('tip_chord', flightRequest.rocket.fins.tip_chord)",
									"pm.collectionVariables.set('span', flightRequest.rocket.fins.span)",
									"pm.collectionVariables.set('fin_position', flightRequest.rocket.fins.position)",
									"pm.collectionVariables.set('cant_angle', flightRequest.rocket.fins.cant_angle)",
									"pm.collectionVariables.set('fin_radius', flightRequest.rocket.fins.radius)",
									"pm.collectionVariables.set('airfoil', flightRequest.rocket.fins.airfoil)",
									"",
									"// flight rocket tail",
									"pm.collectionVariables.set('top_radius', flightRequest.rocket.tail.top_radius)",
									"pm.collectionVariables.set('bottom_radius', flightRequest.rocket.tail.bottom_radius)",
									"pm.collectionVariables.set('tail_length', flightRequest.rocket.tail.length)",
									"pm.collectionVariables.set('tail_position', flightRequest.rocket.tail.position)",
									"pm.collectionVariables.set('tail_radius', flightRequest.rocket.tail.radius)",
									"",
									"// flight rocket parachute",
									"pm.collectionVariables.set('parachutes_names', flightRequest.rocket.parachutes.name)",
									"pm.collectionVariables.set('parachutes_cds', flightRequest.rocket.parachutes.cd_s)",
									"pm.collectionVariables.set('parachutes_sampling_rate', flightRequest.rocket.parachutes.sampling_rate)",
									"pm.collectionVariables.set('parachutes_lags', flightRequest.rocket.parachutes.lag)",
									"pm.collectionVariables.set('parachutes_noises', flightRequest.rocket.parachutes.noise)",
									"pm.collectionVariables.set('parachutes_triggers', flightRequest.rocket.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight_id\", function () {",
									"        pm.expect(apiRspn.flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d050be7a-bd84-4959-b952-f0046de4960d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c7ade98a-c693-43a6-80b2-1cd1e5f9f34d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rail_length\": 5.2,\n    \"inclination\": 85,\n    \"heading\": 0,\n    \"environment\": {\n        \"latitude\": 0,\n        \"longitude\": 0,\n        \"elevation\": 1405,\n        \"atmospheric_model_type\": \"standard_atmosphere\",\n        \"atmospheric_model_file\": \"GFS\",\n        \"date\": \"2023-05-09T16:30:50.065992\"\n    },\n    \"rocket\": {\n        \"radius\": 0.0632,\n        \"mass\": 16.235,\n        \"inertia\": [\n            6.321, \n            6.321, \n            0.0346\n        ],\n        \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n        \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n        \"center_of_mass_without_motor\": 0,\n        \"coordinate_system_orientation\": \"tail_to_nose\",\n        \"motor_position\": -1.255,\n        \"rail_buttons\": {\n            \"upper_button_position\": -0.5,\n            \"lower_button_position\": 0.2,\n            \"angular_position\": 45\n        },\n        \"motor\": {\n            \"burn_time\": 3.9,\n            \"dry_mass\": 1.815,\n            \"dry_inertia\": [0.125, 0.125, 0.002],\n            \"center_of_dry_mass\": 0.317,\n            \"grain_number\": 5,\n            \"grain_density\": 1815,\n            \"grain_outer_radius\": 0.033,\n            \"grain_initial_inner_radius\": 0.015,\n            \"grain_initial_height\": 0.12,\n            \"grains_center_of_mass_position\": -0.85704,\n            \"grain_separation\": 0.005,\n            \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n            \"nozzle_radius\": 0.033,\n            \"throat_radius\": 0.011,\n            \"interpolation_method\": \"linear\",\n            \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n        },\n        \"nose\": {\n            \"length\": 0.55829,\n            \"kind\": \"vonKarman\",\n            \"position\": 1.278,\n            \"base_radius\": 0.0635,\n            \"rocket_radius\": 0.0635\n        },\n        \"fins\": {\n            \"n\": 4,\n            \"root_chord\": 0.12,\n            \"tip_chord\": 0.04,\n            \"span\": 0.1,\n            \"position\": -1.04956,\n            \"cant_angle\": 0,\n            \"radius\": 0.0635,\n            \"airfoil\": \"\"\n        },\n        \"tail\": {\n            \"top_radius\": 0.0635,\n            \"bottom_radius\": 0.0435,\n            \"length\": 0.06,\n            \"position\": -1.194656,\n            \"radius\": 0.0635\n        },\n        \"parachutes\": {\n            \"name\": [\n                \"Main\",\n                \"Drogue\"\n            ],\n            \"cd_s\": [\n                10,\n                1\n            ],\n            \"sampling_rate\": [\n                105,\n                105\n            ],\n            \"lag\": [\n                1.5,\n                1.5\n            ],\n            \"noise\": [\n                [\n                    0,\n                    8.3,\n                    0.5\n                ],\n                [\n                    0,\n                    8.3,\n                    0.5\n                ]\n            ],\n            \"triggers\": [\n                \"lambda p, h, y: y[5] < 0 and h < 800\",\n                \"lambda p, h, y: y[5] < 0\"\n            ]\n        }\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eba23830-b51b-4d12-9f46-8df2b474b6e8",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"var returned_date = apiRspn.environment.date;",
									"var reduced_returned_date = returned_date.substring(0, returned_date.length - 7);",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight \", function () {",
									"        pm.expect(apiRspn.inclination).to.eql(pm.collectionVariables.get('inclination'), \"flight inclination not matching\");",
									"        pm.expect(apiRspn.heading).to.eql(pm.collectionVariables.get('heading'), \"flight heading not matching\");",
									"        pm.expect(apiRspn.rail_length).to.eql(pm.collectionVariables.get('rail_length'), \"flight rail_length not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight environment\", function () {",
									"        pm.expect(apiRspn.environment.longitude).to.eql(pm.collectionVariables.get('longitude'), \"environment longitude not matching\");        ",
									"        pm.expect(apiRspn.environment.elevation).to.eql(pm.collectionVariables.get('elevation'), \"environment elevation not matching\");",
									"        pm.expect(apiRspn.environment.atmospheric_model_type).to.eql(pm.collectionVariables.get('atmospheric_model_type'), \"environment atmospheric_model_type not matching\");",
									"        pm.expect(apiRspn.environment.atmospheric_model_file).to.eql(pm.collectionVariables.get('atmospheric_model_file'), \"environment atmospheric_model_file not matching\");",
									"        pm.expect(reduced_returned_date).to.eql(pm.collectionVariables.get('date'), \"date not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket\", function () {        ",
									"        pm.expect(apiRspn.rocket.radius).to.eql(pm.collectionVariables.get('radius'), \"rocket radius not matching\");",
									"        pm.expect(apiRspn.rocket.mass).to.eql(pm.collectionVariables.get('mass'), \"rocket mass not matching\");",
									"        pm.expect(apiRspn.rocket.inertia).to.eql(pm.collectionVariables.get('inertia'), \"rocket inertia not matching\");",
									"        pm.expect(apiRspn.rocket.power_off_drag).to.eql(pm.collectionVariables.get('power_off_drag'), \"rocket power_off_drag not matching\");",
									"        pm.expect(apiRspn.rocket.power_on_drag).to.eql(pm.collectionVariables.get('power_on_drag'), \"rocket power_on_drag not matching\");",
									"        pm.expect(apiRspn.rocket.center_of_mass_without_motor).to.eql(pm.collectionVariables.get('center_of_mass_without_motor'), \"rocket center_of_mass_without_motor not matching\");",
									"        pm.expect(apiRspn.rocket.coordinate_system_orientation).to.eql(pm.collectionVariables.get('rocket_coordinate_system_orientation'), \"rocket coordinate_system_orientation not matching\");",
									"        pm.expect(apiRspn.rocket.motor_position).to.eql(pm.collectionVariables.get('motor_position'), \"rocket motor_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons).to.eql(pm.collectionVariables.get('rail_buttons'), \"rocket rail_buttons not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.upper_button_position).to.eql(pm.collectionVariables.get('upper_button_position'), \"rocket rail_buttons upper_button_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.lower_button_position).to.eql(pm.collectionVariables.get('lower_button_position'), \"rocket rail_buttons lower_button_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.angular_position).to.eql(pm.collectionVariables.get('angular_position'), \"rocket rail_buttons angular_position not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket motor\", function () {",
									"        pm.expect(apiRspn.rocket.motor.burn_time).to.eql(pm.collectionVariables.get('burn_time'), \"rocket motor burn_time not matching\");",
									"        pm.expect(apiRspn.rocket.motor.dry_mass).to.eql(pm.collectionVariables.get('dry_mass'), \"rocket motor dry_mass not matching\");",
									"        pm.expect(apiRspn.rocket.motor.dry_inertia).to.eql(pm.collectionVariables.get('dry_inertia'), \"rocket motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.rocket.motor.center_of_dry_mass).to.eql(pm.collectionVariables.get('center_of_dry_mass'), \"rocket motor center_of_dry_mass not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_number).to.eql(pm.collectionVariables.get('grain_number'), \"rocket motor grain_number not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_density).to.eql(pm.collectionVariables.get('grain_density'), \"rocket motor grain_density not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_outer_radius).to.eql(pm.collectionVariables.get('grain_outer_radius'), \"rocket motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_initial_inner_radius).to.eql(pm.collectionVariables.get('grain_initial_inner_radius'), \"rocket motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_initial_height).to.eql(pm.collectionVariables.get('grain_initial_height'), \"rocket motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grains_center_of_mass_position).to.eql(pm.collectionVariables.get('grains_center_of_mass_position'), \"rocket motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.rocket.motor.thrust_source).to.eql(pm.collectionVariables.get('thrust_source'), \"rocket motor thrust_source not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_separation).to.eql(pm.collectionVariables.get('grain_separation'), \"rocket motor grain_separation not matching\");",
									"        pm.expect(apiRspn.rocket.motor.nozzle_radius).to.eql(pm.collectionVariables.get('nozzle_radius'), \"rocket motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.throat_radius).to.eql(pm.collectionVariables.get('throat_radius'), \"rocket motor throat_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.interpolation_method).to.eql(pm.collectionVariables.get('interpolation_method'), \"rocket motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.rocket.motor.coordinate_system_orientation).to.eql(pm.collectionVariables.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket nose\", function () {",
									"        pm.expect(apiRspn.rocket.nose.length).to.eql(pm.collectionVariables.get('nose_length'), \"rocket nose length not matching\");",
									"        pm.expect(apiRspn.rocket.nose.kind).to.eql(pm.collectionVariables.get('kind'), \"rocket nose kind not matching\");",
									"        pm.expect(apiRspn.rocket.nose.position).to.eql(pm.collectionVariables.get('nose_position'), \"rocket nose position not matching\");",
									"        pm.expect(apiRspn.rocket.nose.base_radius).to.eql(pm.collectionVariables.get('base_radius'), \"rocket nose base_radius not matching\");",
									"        pm.expect(apiRspn.rocket.nose.rocket_radius).to.eql(pm.collectionVariables.get('rocket_radius'), \"rocket nose rocket_radius not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket fins\", function () {",
									"        pm.expect(apiRspn.rocket.fins.n).to.eql(pm.collectionVariables.get('n'), \"rocket fins 'n' not matching\");",
									"        pm.expect(apiRspn.rocket.fins.root_chord).to.eql(pm.collectionVariables.get('root_chord'), \"rocket fins root_chord not matching\");",
									"        pm.expect(apiRspn.rocket.fins.tip_chord).to.eql(pm.collectionVariables.get('tip_chord'), \"rocket fins tip_chord not matching\");",
									"        pm.expect(apiRspn.rocket.fins.span).to.eql(pm.collectionVariables.get('span'), \"rocket fins span not matching\");",
									"        pm.expect(apiRspn.rocket.fins.position).to.eql(pm.collectionVariables.get('fin_position'), \"rocket fins position not matching\");",
									"        pm.expect(apiRspn.rocket.fins.cant_angle).to.eql(pm.collectionVariables.get('cant_angle'), \"rocket fins cant_angle not matching\");",
									"        pm.expect(apiRspn.rocket.fins.radius).to.eql(pm.collectionVariables.get('fin_radius'), \"rocket fins radius not matching\");",
									"        pm.expect(apiRspn.rocket.fins.airfoil).to.eql(pm.collectionVariables.get('airfoil'), \"rocket fins airfoil not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket tail\", function () {",
									"        pm.expect(apiRspn.rocket.tail.top_radius).to.eql(pm.collectionVariables.get('top_radius'), \"rocket tail top_radius not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.bottom_radius).to.eql(pm.collectionVariables.get('bottom_radius'), \"rocket tail bottom_radius not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.length).to.eql(pm.collectionVariables.get('tail_length'), \"rocket tail length not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.position).to.eql(pm.collectionVariables.get('tail_position'), \"rocket tail position not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.radius).to.eql(pm.collectionVariables.get('tail_radius'), \"rocket tail radius not matching\");        ",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket parachutes\", function () {",
									"        pm.expect(apiRspn.rocket.parachutes.name).to.eql(pm.collectionVariables.get('parachutes_names'), \"rocket parachutes names not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.cd_s).to.eql(pm.collectionVariables.get('parachutes_cds'), \"rocket parachutes cd_s not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.sampling_rate).to.eql(pm.collectionVariables.get('parachutes_sampling_rate'), \"rocket parachutes sampling_rate not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.lag).to.eql(pm.collectionVariables.get('parachutes_lags'), \"rocket parachutes lags not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.noise).to.eql(pm.collectionVariables.get('parachutes_noises'), \"rocket parachutes noises not matching\");",
									"        pm.expect(apiRspn.rocket.parachutes.triggers).to.eql(pm.collectionVariables.get('parachutes_triggers'), \"rocket parachutes triggers not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "810df5b5-0de5-42c0-bacb-0efc8cf99eb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "897c72b6-83e4-46cf-9dc7-1d970a3400c6",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Flight GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_flight).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62d4695f-a47d-43d2-a48d-21618d9d0c02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/rocketpy/{{flight_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc79dac5-4b4b-4fa2-ac08-1cdfc5c20a02",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Flight simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.flight_data).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_angular_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_angular_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.max_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.max_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.min_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.relative_error_tolerance).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.absolute_error_tolerance).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.time_overshoot).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.terminate_on_apogee).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.number_of_time_steps).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.function_evaluations_per_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.avg_function_evaluations_per_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.rail_length).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.flight_inclination).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.flight_heading).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions.frontal_surface_wind_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions.lateral_surface_wind_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_static_margin).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_angle_of_attack).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_thrust_weight_ratio).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_reynolds_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_rocket_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_freestream_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_mach_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_kinetic_energy).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_freestream_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_mach_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_reynolds_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_dynamic_pressure).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_acceleration_during_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_acceleration_after_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_gs_during_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_gs_after_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_upper_rail_button_normal_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_upper_rail_button_shear_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_lower_rail_button_normal_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_lower_rail_button_shear_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.x_impact_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.y_impact_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.time_of_impact).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.impact_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace.Drogue).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace.Main).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2afb4d8e-1788-40da-a8c3-a4f5d93315e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef52c1d9-e18c-42c6-b9e5-6e067d37d556",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce environment date for future assertion",
									"flightRequest.environment.date = flightRequest.environment.date.substring(0, flightRequest.environment.date.length - 7);",
									"",
									"// save flight parameters",
									"pm.collectionVariables.set('flight_id', apiRspn.new_flight_id)        ",
									"pm.collectionVariables.set('rail_length', flightRequest.rail_length)        ",
									"pm.collectionVariables.set('inclination', flightRequest.inclination)",
									"pm.collectionVariables.set('heading', flightRequest.heading)",
									"",
									"// flight environment",
									"pm.collectionVariables.set('latitude', flightRequest.environment.latitude)",
									"pm.collectionVariables.set('longitude', flightRequest.environment.longitude)",
									"pm.collectionVariables.set('elevation', flightRequest.environment.elevation)      ",
									"pm.collectionVariables.set('atmospheric_model_type', flightRequest.environment.atmospheric_model_type)    ",
									"pm.collectionVariables.set('atmospheric_model_file', flightRequest.environment.atmospheric_model_file)            ",
									"pm.collectionVariables.set('date', flightRequest.environment.date)        ",
									"",
									"// flight rocket",
									"pm.collectionVariables.set('radius', flightRequest.rocket.radius)",
									"pm.collectionVariables.set('mass', flightRequest.rocket.mass)",
									"pm.collectionVariables.set('inertia', flightRequest.rocket.inertia)",
									"pm.collectionVariables.set('power_off_drag', flightRequest.rocket.power_off_drag)",
									"pm.collectionVariables.set('power_on_drag', flightRequest.rocket.power_on_drag)",
									"pm.collectionVariables.set('center_of_mass_without_motor', flightRequest.rocket.center_of_mass_without_motor)",
									"pm.collectionVariables.set('motor_position', flightRequest.rocket.motor_position)",
									"pm.collectionVariables.set('rail_buttons', flightRequest.rocket.rail_buttons)",
									"pm.collectionVariables.set('upper_button_position', flightRequest.rocket.rail_buttons.upper_button_position)",
									"pm.collectionVariables.set('lower_button_position', flightRequest.rocket.rail_buttons.lower_button_position)",
									"pm.collectionVariables.set('angular_position', flightRequest.rocket.rail_buttons.angular_position)",
									"pm.collectionVariables.set('rocket_coordinate_system_orientation', flightRequest.rocket.coordinate_system_orientation)",
									"",
									"// flight rocket motor",
									"pm.collectionVariables.set('burn_time', flightRequest.rocket.motor.burn_time)",
									"pm.collectionVariables.set('dry_mass', flightRequest.rocket.motor.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', flightRequest.rocket.motor.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', flightRequest.rocket.motor.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', flightRequest.rocket.motor.grain_number)",
									"pm.collectionVariables.set('grain_density', flightRequest.rocket.motor.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', flightRequest.rocket.motor.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', flightRequest.rocket.motor.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', flightRequest.rocket.motor.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', flightRequest.rocket.motor.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', flightRequest.rocket.motor.grain_separation)",
									"pm.collectionVariables.set('thrust_source', flightRequest.rocket.motor.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', flightRequest.rocket.motor.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', flightRequest.rocket.motor.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', flightRequest.rocket.motor.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', flightRequest.rocket.motor.coordinate_system_orientation)",
									"",
									"// flight rocket nose",
									"pm.collectionVariables.set('nose_length', flightRequest.rocket.nose.length)",
									"pm.collectionVariables.set('kind', flightRequest.rocket.nose.kind)",
									"pm.collectionVariables.set('nose_position', flightRequest.rocket.nose.position)",
									"pm.collectionVariables.set('base_radius', flightRequest.rocket.nose.base_radius)",
									"pm.collectionVariables.set('rocket_radius', flightRequest.rocket.nose.rocket_radius)",
									"",
									"// flight rocket fins",
									"pm.collectionVariables.set('n', flightRequest.rocket.fins.n)",
									"pm.collectionVariables.set('root_chord', flightRequest.rocket.fins.root_chord)",
									"pm.collectionVariables.set('tip_chord', flightRequest.rocket.fins.tip_chord)",
									"pm.collectionVariables.set('span', flightRequest.rocket.fins.span)",
									"pm.collectionVariables.set('fin_position', flightRequest.rocket.fins.position)",
									"pm.collectionVariables.set('cant_angle', flightRequest.rocket.fins.cant_angle)",
									"pm.collectionVariables.set('fin_radius', flightRequest.rocket.fins.radius)",
									"pm.collectionVariables.set('airfoil', flightRequest.rocket.fins.airfoil)",
									"",
									"// flight rocket tail",
									"pm.collectionVariables.set('top_radius', flightRequest.rocket.tail.top_radius)",
									"pm.collectionVariables.set('bottom_radius', flightRequest.rocket.tail.bottom_radius)",
									"pm.collectionVariables.set('tail_length', flightRequest.rocket.tail.length)",
									"pm.collectionVariables.set('tail_position', flightRequest.rocket.tail.position)",
									"pm.collectionVariables.set('tail_radius', flightRequest.rocket.tail.radius)",
									"",
									"// flight rocket parachute",
									"pm.collectionVariables.set('parachutes_names', flightRequest.rocket.parachutes.name)",
									"pm.collectionVariables.set('parachutes_cds', flightRequest.rocket.parachutes.cd_s)",
									"pm.collectionVariables.set('parachutes_sampling_rate', flightRequest.rocket.parachutes.sampling_rate)",
									"pm.collectionVariables.set('parachutes_lags', flightRequest.rocket.parachutes.lag)",
									"pm.collectionVariables.set('parachutes_noises', flightRequest.rocket.parachutes.noise)",
									"pm.collectionVariables.set('parachutes_triggers', flightRequest.rocket.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_flight_id\", function () {",
									"        pm.expect(apiRspn.new_flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fef9ffcd-2bea-47e1-a66f-6e87b93e90df",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af363968-a3c9-48b1-84ed-bbc333855a8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rail_length\": 5.2,\n    \"inclination\": 85,\n    \"heading\": 0,\n    \"environment\": {\n        \"latitude\": 0,\n        \"longitude\": 0,\n        \"elevation\": 1405,\n        \"atmospheric_model_type\": \"standard_atmosphere\",\n        \"atmospheric_model_file\": \"GFS\",\n        \"date\": \"2023-05-09T16:30:50.065992\"\n    },\n    \"rocket\": {\n        \"radius\": 0.0632,\n        \"mass\": 16.235,\n        \"inertia\": [\n            6.321, \n            6.321, \n            0.0346\n        ],\n        \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n        \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n        \"center_of_mass_without_motor\": 0,\n        \"coordinate_system_orientation\": \"tail_to_nose\",\n        \"motor_position\": -1.255,\n        \"rail_buttons\": {\n            \"upper_button_position\": -0.5,\n            \"lower_button_position\": 0.2,\n            \"angular_position\": 45\n        },\n        \"motor\": {\n            \"burn_time\": 3.9,\n            \"dry_mass\": 1.815,\n            \"dry_inertia\": [0.125, 0.125, 0.002],\n            \"center_of_dry_mass\": 0.317,\n            \"grain_number\": 5,\n            \"grain_density\": 1815,\n            \"grain_outer_radius\": 0.033,\n            \"grain_initial_inner_radius\": 0.015,\n            \"grain_initial_height\": 0.12,\n            \"grains_center_of_mass_position\": -0.85704,\n            \"grain_separation\": 0.005,\n            \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n            \"nozzle_radius\": 0.033,\n            \"throat_radius\": 0.011,\n            \"interpolation_method\": \"linear\",\n            \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n        },\n        \"nose\": {\n            \"length\": 0.55829,\n            \"kind\": \"vonKarman\",\n            \"position\": 1.278,\n            \"base_radius\": 0.0635,\n            \"rocket_radius\": 0.0635\n        },\n        \"fins\": {\n            \"n\": 4,\n            \"root_chord\": 0.12,\n            \"tip_chord\": 0.04,\n            \"span\": 0.1,\n            \"position\": -1.04956,\n            \"cant_angle\": 0,\n            \"radius\": 0.0635,\n            \"airfoil\": \"\"\n        },\n        \"tail\": {\n            \"top_radius\": 0.0635,\n            \"bottom_radius\": 0.0435,\n            \"length\": 0.06,\n            \"position\": -1.194656,\n            \"radius\": 0.0635\n        },\n        \"parachutes\": {\n            \"name\": [\n                \"Main\",\n                \"Drogue\"\n            ],\n            \"cd_s\": [\n                10,\n                1\n            ],\n            \"sampling_rate\": [\n                105,\n                105\n            ],\n            \"lag\": [\n                1.5,\n                1.5\n            ],\n            \"noise\": [\n                [\n                    0,\n                    8.3,\n                    0.5\n                ],\n                [\n                    0,\n                    8.3,\n                    0.5\n                ]\n            ],\n            \"triggers\": [\n                \"lambda p, h, y: y[5] < 0 and h < 800\",\n                \"lambda p, h, y: y[5] < 0\"\n            ]\n        }\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/{{flight_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d968db50-a1e7-42f5-a873-c7e053cc7980",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Flight DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_flight_id).to.eql(pm.collectionVariables.get('flight_id'), \"flight_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0043d68a-d984-4a7b-b6a4-f79433549e84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}"
					},
					"response": []
				}
			],
			"id": "cc74f04b-eac6-4b33-9daf-754e2204eeab"
		},
		{
			"name": "Motor",
			"item": [
				{
					"name": "Create Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71b5f65c-9ba7-43bd-aa93-8ff1a3c99cc6",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var motorRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save motor parameters",
									"pm.collectionVariables.set('motor_id', apiRspn.motor_id)        ",
									"pm.collectionVariables.set('burn_time', motorRequest.burn_time)",
									"pm.collectionVariables.set('dry_mass', motorRequest.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', motorRequest.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', motorRequest.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', motorRequest.grain_number)",
									"pm.collectionVariables.set('grain_density', motorRequest.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', motorRequest.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', motorRequest.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', motorRequest.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', motorRequest.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', motorRequest.grain_separation)",
									"pm.collectionVariables.set('thrust_source', motorRequest.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', motorRequest.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', motorRequest.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', motorRequest.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', motorRequest.coordinate_system_orientation)",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid motor_id\", function () {",
									"        pm.expect(apiRspn.motor_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1bf80fb6-4e96-4b77-ba94-5d23c96bf038",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee777d0d-6301-4494-961b-c2c6c573facb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"burn_time\": 3.9,\n    \"dry_mass\": 1.815,\n    \"dry_inertia\": [0.125, 0.125, 0.002],\n    \"center_of_dry_mass\": 0.317,\n    \"grain_number\": 5,\n    \"grain_density\": 1815,\n    \"grain_outer_radius\": 0.033,\n    \"grain_initial_inner_radius\": 0.015,\n    \"grain_initial_height\": 0.12,\n    \"grains_center_of_mass_position\": -0.85704,\n    \"grain_separation\": 0.005,\n    \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n    \"nozzle_radius\": 0.033,\n    \"throat_radius\": 0.011,\n    \"interpolation_method\": \"linear\",\n    \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/motors/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ab9f13e-d3eb-4f45-b58a-1dde3f2bd415",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });    ",
									"    pm.test(bdd + \" then response must contain a valid motor\", function () {",
									"        pm.expect(apiRspn.burn_time).to.eql(pm.collectionVariables.get('burn_time'), \"motor burn_time not matching\");",
									"        pm.expect(apiRspn.dry_mass).to.eql(pm.collectionVariables.get('dry_mass'), \"motor dry_mass not matching\");",
									"        pm.expect(apiRspn.dry_inertia).to.eql(pm.collectionVariables.get('dry_inertia'), \"motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.center_of_dry_mass).to.eql(pm.collectionVariables.get('center_of_dry_mass'), \"motor center_of_dry_mass not matching\");",
									"        pm.expect(apiRspn.grain_number).to.eql(pm.collectionVariables.get('grain_number'), \"motor grain_number not matching\");",
									"        pm.expect(apiRspn.grain_density).to.eql(pm.collectionVariables.get('grain_density'), \"motor grain_density not matching\");",
									"        pm.expect(apiRspn.grain_outer_radius).to.eql(pm.collectionVariables.get('grain_outer_radius'), \"motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.grain_initial_inner_radius).to.eql(pm.collectionVariables.get('grain_initial_inner_radius'), \"motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.grain_initial_height).to.eql(pm.collectionVariables.get('grain_initial_height'), \"motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.grains_center_of_mass_position).to.eql(pm.collectionVariables.get('grains_center_of_mass_position'), \"motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.thrust_source).to.eql(pm.collectionVariables.get('thrust_source'), \"motor thrust_source not matching\");",
									"        pm.expect(apiRspn.grain_separation).to.eql(pm.collectionVariables.get('grain_separation'), \"motor grain_separation not matching\");",
									"        pm.expect(apiRspn.nozzle_radius).to.eql(pm.collectionVariables.get('nozzle_radius'), \"motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.throat_radius).to.eql(pm.collectionVariables.get('throat_radius'), \"motor throat_radius not matching\");",
									"        pm.expect(apiRspn.interpolation_method).to.eql(pm.collectionVariables.get('interpolation_method'), \"motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.coordinate_system_orientation).to.eql(pm.collectionVariables.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7208fdb8-b5ec-4ba3-a5da-267fbe12cd39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcca1efd-5939-4ab5-bf8e-dae1beeface7",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Motor GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_motor).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7d41255d-2764-4f36-a677-7f1fb500ae47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/rocketpy/{{motor_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc79dac5-4b4b-4fa2-ac08-1cdfc5c20a02",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Motor simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.motor_data).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_burning_time).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_propellant_mass).to.exist;",
									"        pm.expect(apiRspn.motor_data.average_propellant_exhaust_velocity).to.exist;",
									"        pm.expect(apiRspn.motor_data.average_thrust).to.exist;",
									"        pm.expect(apiRspn.motor_data.maximum_thrust).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_impulse).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "46f4f239-b459-475f-9ca3-873baf50e690",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32e65786-a6e1-4dc3-a1df-b9fe879d17cc",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var motorRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save motor parameters",
									"pm.collectionVariables.set('motor_id', apiRspn.new_motor_id)",
									"pm.collectionVariables.set('burn_time', motorRequest.burn_time)",
									"pm.collectionVariables.set('dry_mass', motorRequest.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', motorRequest.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', motorRequest.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', motorRequest.grain_number)",
									"pm.collectionVariables.set('grain_density', motorRequest.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', motorRequest.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', motorRequest.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', motorRequest.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', motorRequest.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', motorRequest.grain_separation)",
									"pm.collectionVariables.set('thrust_source', motorRequest.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', motorRequest.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', motorRequest.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', motorRequest.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', motorRequest.coordinate_system_orientation)",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_motor_id\", function () {",
									"        pm.expect(apiRspn.new_motor_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6336bef0-e693-400a-826f-d1f2c2bd6a9b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7bdaec1-2a9e-42dd-bfa7-a8342e7d47c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"burn_time\": 3.9,\n    \"dry_mass\": 1.815,\n    \"dry_inertia\": [0.125, 0.125, 0.002],\n    \"center_of_dry_mass\": 0.317,\n    \"grain_number\": 5,\n    \"grain_density\": 1815,\n    \"grain_outer_radius\": 0.033,\n    \"grain_initial_inner_radius\": 0.015,\n    \"grain_initial_height\": 0.12,\n    \"grains_center_of_mass_position\": -0.85704,\n    \"grain_separation\": 0.005,\n    \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n    \"nozzle_radius\": 0.033,\n    \"throat_radius\": 0.011,\n    \"interpolation_method\": \"linear\",\n    \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/motors/{{motor_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1e587bc-91fa-4fa5-a836-8075de91ea33",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Motor DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_motor_id).to.eql(pm.collectionVariables.get('motor_id'), \"motor_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dd1b5d5f-ef2d-4b61-8cf6-de895792864e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}"
					},
					"response": []
				}
			],
			"id": "733fa55d-0a77-4a8d-b1d7-6fefc5a8211e"
		},
		{
			"name": "Rocket",
			"item": [
				{
					"name": "Create Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d479eb5-238e-4d92-8b39-5ab18cf5159d",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var rocketRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save rocket parameters",
									"pm.collectionVariables.set('rocket_id', apiRspn.rocket_id)",
									"pm.collectionVariables.set('radius', rocketRequest.radius)",
									"pm.collectionVariables.set('mass', rocketRequest.mass)",
									"pm.collectionVariables.set('inertia', rocketRequest.inertia)",
									"pm.collectionVariables.set('power_off_drag', rocketRequest.power_off_drag)",
									"pm.collectionVariables.set('power_on_drag', rocketRequest.power_on_drag)",
									"pm.collectionVariables.set('center_of_mass_without_motor', rocketRequest.center_of_mass_without_motor)",
									"pm.collectionVariables.set('motor_position', rocketRequest.motor_position)",
									"pm.collectionVariables.set('rail_buttons', rocketRequest.rail_buttons)",
									"pm.collectionVariables.set('upper_button_position', rocketRequest.rail_buttons.upper_button_position)",
									"pm.collectionVariables.set('lower_button_position', rocketRequest.rail_buttons.lower_button_position)",
									"pm.collectionVariables.set('angular_position', rocketRequest.rail_buttons.angular_position)",
									"pm.collectionVariables.set('rocket_coordinate_system_orientation', rocketRequest.coordinate_system_orientation)",
									"",
									"// rocket motor",
									"pm.collectionVariables.set('burn_time', rocketRequest.motor.burn_time)",
									"pm.collectionVariables.set('dry_mass', rocketRequest.motor.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', rocketRequest.motor.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', rocketRequest.motor.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', rocketRequest.motor.grain_number)",
									"pm.collectionVariables.set('grain_density', rocketRequest.motor.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', rocketRequest.motor.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', rocketRequest.motor.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', rocketRequest.motor.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', rocketRequest.motor.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', rocketRequest.motor.grain_separation)",
									"pm.collectionVariables.set('thrust_source', rocketRequest.motor.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', rocketRequest.motor.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', rocketRequest.motor.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', rocketRequest.motor.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', rocketRequest.motor.coordinate_system_orientation)",
									"",
									"// rocket nose",
									"pm.collectionVariables.set('nose_length', rocketRequest.nose.length)",
									"pm.collectionVariables.set('kind', rocketRequest.nose.kind)",
									"pm.collectionVariables.set('nose_position', rocketRequest.nose.position)",
									"pm.collectionVariables.set('base_radius', rocketRequest.nose.base_radius)",
									"pm.collectionVariables.set('rocket_radius', rocketRequest.nose.rocket_radius)",
									"",
									"// rocket fins",
									"pm.collectionVariables.set('n', rocketRequest.fins.n)",
									"pm.collectionVariables.set('root_chord', rocketRequest.fins.root_chord)",
									"pm.collectionVariables.set('tip_chord', rocketRequest.fins.tip_chord)",
									"pm.collectionVariables.set('span', rocketRequest.fins.span)",
									"pm.collectionVariables.set('fin_position', rocketRequest.fins.position)",
									"pm.collectionVariables.set('cant_angle', rocketRequest.fins.cant_angle)",
									"pm.collectionVariables.set('fin_radius', rocketRequest.fins.radius)",
									"pm.collectionVariables.set('airfoil', rocketRequest.fins.airfoil)",
									"",
									"// rocket tail",
									"pm.collectionVariables.set('top_radius', rocketRequest.tail.top_radius)",
									"pm.collectionVariables.set('bottom_radius', rocketRequest.tail.bottom_radius)",
									"pm.collectionVariables.set('tail_length', rocketRequest.tail.length)",
									"pm.collectionVariables.set('tail_position', rocketRequest.tail.position)",
									"pm.collectionVariables.set('tail_radius', rocketRequest.tail.radius)",
									"",
									"// rocket parachute",
									"pm.collectionVariables.set('parachutes_names', rocketRequest.parachutes.name)",
									"pm.collectionVariables.set('parachutes_cds', rocketRequest.parachutes.cd_s)",
									"pm.collectionVariables.set('parachutes_sampling_rate', rocketRequest.parachutes.sampling_rate)",
									"pm.collectionVariables.set('parachutes_lags', rocketRequest.parachutes.lag)",
									"pm.collectionVariables.set('parachutes_noises', rocketRequest.parachutes.noise)",
									"pm.collectionVariables.set('parachutes_triggers', rocketRequest.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid rocket_id\", function () {",
									"        pm.expect(apiRspn.rocket_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8a2a81b-6e39-43ef-b5b4-2ec855b71fcb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fa12dc7-1f53-411b-98c2-f924425def2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"radius\": 0.0632,\n    \"mass\": 16.235,\n    \"inertia\": [\n        6.321, \n        6.321, \n        0.0346\n    ],\n    \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n    \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n    \"center_of_mass_without_motor\": 0,\n    \"coordinate_system_orientation\": \"tail_to_nose\",\n    \"motor_position\": -1.255,\n    \"rail_buttons\": {\n        \"upper_button_position\": -0.5,\n        \"lower_button_position\": 0.2,\n        \"angular_position\": 45\n    },\n    \"motor\": {\n        \"burn_time\": 3.9,\n        \"dry_mass\": 1.815,\n        \"dry_inertia\": [0.125, 0.125, 0.002],\n        \"center_of_dry_mass\": 0.317,\n        \"grain_number\": 5,\n        \"grain_density\": 1815,\n        \"grain_outer_radius\": 0.033,\n        \"grain_initial_inner_radius\": 0.015,\n        \"grain_initial_height\": 0.12,\n        \"grains_center_of_mass_position\": -0.85704,\n        \"grain_separation\": 0.005,\n        \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n        \"nozzle_radius\": 0.033,\n        \"throat_radius\": 0.011,\n        \"interpolation_method\": \"linear\",\n        \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n    },\n    \"nose\": {\n        \"length\": 0.55829,\n        \"kind\": \"vonKarman\",\n        \"position\": 1.278,\n        \"base_radius\": 0.0635,\n        \"rocket_radius\": 0.0635\n    },\n    \"fins\": {\n        \"n\": 4,\n        \"root_chord\": 0.12,\n        \"tip_chord\": 0.04,\n        \"span\": 0.1,\n        \"position\": -1.04956,\n        \"cant_angle\": 0,\n        \"radius\": 0.0635,\n        \"airfoil\": \"\"\n    },\n    \"tail\": {\n        \"top_radius\": 0.0635,\n        \"bottom_radius\": 0.0435,\n        \"length\": 0.06,\n        \"position\": -1.194656,\n        \"radius\": 0.0635\n    },\n    \"parachutes\": {\n        \"name\": [\n            \"Main\",\n            \"Drogue\"\n        ],\n        \"cd_s\": [\n            10,\n            1\n        ],\n        \"sampling_rate\": [\n            105,\n            105\n        ],\n        \"lag\": [\n            1.5,\n            1.5\n        ],\n        \"noise\": [\n            [\n                0,\n                8.3,\n                0.5\n            ],\n            [\n                0,\n                8.3,\n                0.5\n            ]\n        ],\n        \"triggers\": [\n            \"lambda p, h, y: y[5] < 0 and h < 800\",\n            \"lambda p, h, y: y[5] < 0\"\n        ]\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/rockets/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f92d1f61-0a9d-4d20-9e19-86f7547ee31c",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });    ",
									"    pm.test(bdd + \" then response must contain a valid rocket\", function () {        ",
									"        pm.expect(apiRspn.radius).to.eql(pm.collectionVariables.get('radius'), \"rocket radius not matching\");",
									"        pm.expect(apiRspn.mass).to.eql(pm.collectionVariables.get('mass'), \"rocket mass not matching\");",
									"        pm.expect(apiRspn.inertia).to.eql(pm.collectionVariables.get('inertia'), \"rocket inertia not matching\");",
									"        pm.expect(apiRspn.power_off_drag).to.eql(pm.collectionVariables.get('power_off_drag'), \"rocket power_off_drag not matching\");",
									"        pm.expect(apiRspn.power_on_drag).to.eql(pm.collectionVariables.get('power_on_drag'), \"rocket power_on_drag not matching\");",
									"        pm.expect(apiRspn.center_of_mass_without_motor).to.eql(pm.collectionVariables.get('center_of_mass_without_motor'), \"rocket center_of_mass_without_motor not matching\");",
									"        pm.expect(apiRspn.coordinate_system_orientation).to.eql(pm.collectionVariables.get('rocket_coordinate_system_orientation'), \"rocket coordinate_system_orientation not matching\");",
									"        pm.expect(apiRspn.motor_position).to.eql(pm.collectionVariables.get('motor_position'), \"rocket motor_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons).to.eql(pm.collectionVariables.get('rail_buttons'), \"rocket rail_buttons not matching\");",
									"        pm.expect(apiRspn.rail_buttons.upper_button_position).to.eql(pm.collectionVariables.get('upper_button_position'), \"rocket rail_buttons upper_button_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons.lower_button_position).to.eql(pm.collectionVariables.get('lower_button_position'), \"rocket rail_buttons lower_button_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons.angular_position).to.eql(pm.collectionVariables.get('angular_position'), \"rocket rail_buttons angular_position not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket motor\", function () {",
									"        pm.expect(apiRspn.motor.burn_time).to.eql(pm.collectionVariables.get('burn_time'), \"rocket motor burn_time not matching\");",
									"        pm.expect(apiRspn.motor.dry_mass).to.eql(pm.collectionVariables.get('dry_mass'), \"rocket motor dry_mass not matching\");",
									"        pm.expect(apiRspn.motor.dry_inertia).to.eql(pm.collectionVariables.get('dry_inertia'), \"rocket motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.motor.center_of_dry_mass).to.eql(pm.collectionVariables.get('center_of_dry_mass'), \"rocket motor center_of_dry_mass not matching\");",
									"        pm.expect(apiRspn.motor.grain_number).to.eql(pm.collectionVariables.get('grain_number'), \"rocket motor grain_number not matching\");",
									"        pm.expect(apiRspn.motor.grain_density).to.eql(pm.collectionVariables.get('grain_density'), \"rocket motor grain_density not matching\");",
									"        pm.expect(apiRspn.motor.grain_outer_radius).to.eql(pm.collectionVariables.get('grain_outer_radius'), \"rocket motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.motor.grain_initial_inner_radius).to.eql(pm.collectionVariables.get('grain_initial_inner_radius'), \"rocket motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.motor.grain_initial_height).to.eql(pm.collectionVariables.get('grain_initial_height'), \"rocket motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.motor.grains_center_of_mass_position).to.eql(pm.collectionVariables.get('grains_center_of_mass_position'), \"rocket motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.motor.thrust_source).to.eql(pm.collectionVariables.get('thrust_source'), \"rocket motor thrust_source not matching\");",
									"        pm.expect(apiRspn.motor.grain_separation).to.eql(pm.collectionVariables.get('grain_separation'), \"rocket motor grain_separation not matching\");",
									"        pm.expect(apiRspn.motor.nozzle_radius).to.eql(pm.collectionVariables.get('nozzle_radius'), \"rocket motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.motor.throat_radius).to.eql(pm.collectionVariables.get('throat_radius'), \"rocket motor throat_radius not matching\");",
									"        pm.expect(apiRspn.motor.interpolation_method).to.eql(pm.collectionVariables.get('interpolation_method'), \"rocket motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.motor.coordinate_system_orientation).to.eql(pm.collectionVariables.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket nose\", function () {",
									"        pm.expect(apiRspn.nose.length).to.eql(pm.collectionVariables.get('nose_length'), \"rocket nose length not matching\");",
									"        pm.expect(apiRspn.nose.kind).to.eql(pm.collectionVariables.get('kind'), \"rocket nose kind not matching\");",
									"        pm.expect(apiRspn.nose.position).to.eql(pm.collectionVariables.get('nose_position'), \"rocket nose position not matching\");",
									"        pm.expect(apiRspn.nose.base_radius).to.eql(pm.collectionVariables.get('base_radius'), \"rocket nose base_radius not matching\");",
									"        pm.expect(apiRspn.nose.rocket_radius).to.eql(pm.collectionVariables.get('rocket_radius'), \"rocket nose rocket_radius not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket fins\", function () {",
									"        pm.expect(apiRspn.fins.n).to.eql(pm.collectionVariables.get('n'), \"rocket fins 'n' not matching\");",
									"        pm.expect(apiRspn.fins.root_chord).to.eql(pm.collectionVariables.get('root_chord'), \"rocket fins root_chord not matching\");",
									"        pm.expect(apiRspn.fins.tip_chord).to.eql(pm.collectionVariables.get('tip_chord'), \"rocket fins tip_chord not matching\");",
									"        pm.expect(apiRspn.fins.span).to.eql(pm.collectionVariables.get('span'), \"rocket fins span not matching\");",
									"        pm.expect(apiRspn.fins.position).to.eql(pm.collectionVariables.get('fin_position'), \"rocket fins position not matching\");",
									"        pm.expect(apiRspn.fins.cant_angle).to.eql(pm.collectionVariables.get('cant_angle'), \"rocket fins cant_angle not matching\");",
									"        pm.expect(apiRspn.fins.radius).to.eql(pm.collectionVariables.get('fin_radius'), \"rocket fins radius not matching\");",
									"        pm.expect(apiRspn.fins.airfoil).to.eql(pm.collectionVariables.get('airfoil'), \"rocket fins airfoil not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket tail\", function () {",
									"        pm.expect(apiRspn.tail.top_radius).to.eql(pm.collectionVariables.get('top_radius'), \"rocket tail top_radius not matching\");        ",
									"        pm.expect(apiRspn.tail.bottom_radius).to.eql(pm.collectionVariables.get('bottom_radius'), \"rocket tail bottom_radius not matching\");        ",
									"        pm.expect(apiRspn.tail.length).to.eql(pm.collectionVariables.get('tail_length'), \"rocket tail length not matching\");        ",
									"        pm.expect(apiRspn.tail.position).to.eql(pm.collectionVariables.get('tail_position'), \"rocket tail position not matching\");        ",
									"        pm.expect(apiRspn.tail.radius).to.eql(pm.collectionVariables.get('tail_radius'), \"rocket tail radius not matching\");        ",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket parachutes\", function () {",
									"        pm.expect(apiRspn.parachutes.name).to.eql(pm.collectionVariables.get('parachutes_names'), \"rocket parachutes names not matching\");                ",
									"        pm.expect(apiRspn.parachutes.cd_s).to.eql(pm.collectionVariables.get('parachutes_cds'), \"rocket parachutes cd_s not matching\");                ",
									"        pm.expect(apiRspn.parachutes.sampling_rate).to.eql(pm.collectionVariables.get('parachutes_sampling_rate'), \"rocket parachutes sampling_rate not matching\");                ",
									"        pm.expect(apiRspn.parachutes.lag).to.eql(pm.collectionVariables.get('parachutes_lags'), \"rocket parachutes lags not matching\");                ",
									"        pm.expect(apiRspn.parachutes.noise).to.eql(pm.collectionVariables.get('parachutes_noises'), \"rocket parachutes noises not matching\");",
									"        pm.expect(apiRspn.parachutes.triggers).to.eql(pm.collectionVariables.get('parachutes_triggers'), \"rocket parachutes triggers not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d3c9e8bd-240f-44fb-bd66-ed1e7d51b4f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "424ba3d4-44fe-44db-997b-e0d80d5bcb80",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Rocket GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_rocket).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d6d0210-eeb5-4f07-844d-fbe0ef3a7c5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/rocketpy/{{rocket_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc79dac5-4b4b-4fa2-ac08-1cdfc5c20a02",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Rocket simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.rocket_data).to.exist;",
									"        pm.expect(apiRspn.inertia_details).to.exist;",
									"        pm.expect(apiRspn.inertia_details.rocket_mass_without_propellant).to.exist;",
									"        pm.expect(apiRspn.inertia_details.rocket_mass_with_propellant).to.exist;",
									"        pm.expect(apiRspn.inertia_details.rocket_inertia_with_motor_without_propellant).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters.rocket_maximum_radius).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters.rocket_frontal_area).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters.rocket_codm_nozzle_exit_distance).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters.rocket_codm_center_of_propellant_mass).to.exist;",
									"        pm.expect(apiRspn.rocket_geometrical_parameters.rocket_codm_loaded_center_of_mass).to.exist;",
									"        pm.expect(apiRspn.rocket_aerodynamics_quantities).to.exist;",
									"        pm.expect(apiRspn.rocket_aerodynamics_quantities.aerodynamics_lift_coefficient_derivatives).to.exist;",
									"        pm.expect(apiRspn.rocket_aerodynamics_quantities.aerodynamics_center_of_pressure).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "252fe8f7-6f1d-4d6a-96f9-bc55e33edfe4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "418bbe76-830a-48c6-a75e-fd4473d737ee",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var rocketRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save rocket parameters",
									"pm.collectionVariables.set('rocket_id', apiRspn.new_rocket_id)",
									"pm.collectionVariables.set('radius', rocketRequest.radius)",
									"pm.collectionVariables.set('mass', rocketRequest.mass)",
									"pm.collectionVariables.set('inertia', rocketRequest.inertia)",
									"pm.collectionVariables.set('power_off_drag', rocketRequest.power_off_drag)",
									"pm.collectionVariables.set('power_on_drag', rocketRequest.power_on_drag)",
									"pm.collectionVariables.set('center_of_mass_without_motor', rocketRequest.center_of_mass_without_motor)",
									"pm.collectionVariables.set('motor_position', rocketRequest.motor_position)",
									"pm.collectionVariables.set('rail_buttons', rocketRequest.rail_buttons)",
									"pm.collectionVariables.set('upper_button_position', rocketRequest.rail_buttons.upper_button_position)",
									"pm.collectionVariables.set('lower_button_position', rocketRequest.rail_buttons.lower_button_position)",
									"pm.collectionVariables.set('angular_position', rocketRequest.rail_buttons.angular_position)",
									"pm.collectionVariables.set('rocket_coordinate_system_orientation', rocketRequest.coordinate_system_orientation)",
									"",
									"// rocket motor",
									"pm.collectionVariables.set('burn_time', rocketRequest.motor.burn_time)",
									"pm.collectionVariables.set('dry_mass', rocketRequest.motor.dry_mass)",
									"pm.collectionVariables.set('dry_inertia', rocketRequest.motor.dry_inertia)",
									"pm.collectionVariables.set('center_of_dry_mass', rocketRequest.motor.center_of_dry_mass)",
									"pm.collectionVariables.set('grain_number', rocketRequest.motor.grain_number)",
									"pm.collectionVariables.set('grain_density', rocketRequest.motor.grain_density)",
									"pm.collectionVariables.set('grain_outer_radius', rocketRequest.motor.grain_outer_radius)",
									"pm.collectionVariables.set('grain_initial_inner_radius', rocketRequest.motor.grain_initial_inner_radius)",
									"pm.collectionVariables.set('grain_initial_height', rocketRequest.motor.grain_initial_height)",
									"pm.collectionVariables.set('grains_center_of_mass_position', rocketRequest.motor.grains_center_of_mass_position)",
									"pm.collectionVariables.set('grain_separation', rocketRequest.motor.grain_separation)",
									"pm.collectionVariables.set('thrust_source', rocketRequest.motor.thrust_source)",
									"pm.collectionVariables.set('nozzle_radius', rocketRequest.motor.nozzle_radius)",
									"pm.collectionVariables.set('throat_radius', rocketRequest.motor.throat_radius)",
									"pm.collectionVariables.set('interpolation_method', rocketRequest.motor.interpolation_method)",
									"pm.collectionVariables.set('motor_coordinate_system_orientation', rocketRequest.motor.coordinate_system_orientation)",
									"",
									"// rocket nose",
									"pm.collectionVariables.set('nose_length', rocketRequest.nose.length)",
									"pm.collectionVariables.set('kind', rocketRequest.nose.kind)",
									"pm.collectionVariables.set('nose_position', rocketRequest.nose.position)",
									"pm.collectionVariables.set('base_radius', rocketRequest.nose.base_radius)",
									"pm.collectionVariables.set('rocket_radius', rocketRequest.nose.rocket_radius)",
									"",
									"// rocket fins",
									"pm.collectionVariables.set('n', rocketRequest.fins.n)",
									"pm.collectionVariables.set('root_chord', rocketRequest.fins.root_chord)",
									"pm.collectionVariables.set('tip_chord', rocketRequest.fins.tip_chord)",
									"pm.collectionVariables.set('span', rocketRequest.fins.span)",
									"pm.collectionVariables.set('fin_position', rocketRequest.fins.position)",
									"pm.collectionVariables.set('cant_angle', rocketRequest.fins.cant_angle)",
									"pm.collectionVariables.set('fin_radius', rocketRequest.fins.radius)",
									"pm.collectionVariables.set('airfoil', rocketRequest.fins.airfoil)",
									"",
									"// rocket tail",
									"pm.collectionVariables.set('top_radius', rocketRequest.tail.top_radius)",
									"pm.collectionVariables.set('bottom_radius', rocketRequest.tail.bottom_radius)",
									"pm.collectionVariables.set('tail_length', rocketRequest.tail.length)",
									"pm.collectionVariables.set('tail_position', rocketRequest.tail.position)",
									"pm.collectionVariables.set('tail_radius', rocketRequest.tail.radius)",
									"",
									"// rocket parachute",
									"pm.collectionVariables.set('parachutes_names', rocketRequest.parachutes.name)",
									"pm.collectionVariables.set('parachutes_cds', rocketRequest.parachutes.cd_s)",
									"pm.collectionVariables.set('parachutes_sampling_rate', rocketRequest.parachutes.sampling_rate)",
									"pm.collectionVariables.set('parachutes_lags', rocketRequest.parachutes.lag)",
									"pm.collectionVariables.set('parachutes_noises', rocketRequest.parachutes.noise)",
									"pm.collectionVariables.set('parachutes_triggers', rocketRequest.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid rocket_id\", function () {",
									"        pm.expect(apiRspn.new_rocket_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9758f8e-7e29-4022-858f-86ce120bab6f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6ec6ee0-3ddd-4754-b25f-db9f75556a32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"radius\": 0.0632,\n    \"mass\": 16.235,\n    \"inertia\": [\n        6.321, \n        6.321, \n        0.0346\n    ],\n    \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n    \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n    \"center_of_mass_without_motor\": 0,\n    \"coordinate_system_orientation\": \"tail_to_nose\",\n    \"motor_position\": -1.255,\n    \"rail_buttons\": {\n        \"upper_button_position\": -0.5,\n        \"lower_button_position\": 0.2,\n        \"angular_position\": 45\n    },\n    \"motor\": {\n        \"burn_time\": 3.9,\n        \"dry_mass\": 1.815,\n        \"dry_inertia\": [0.125, 0.125, 0.002],\n        \"center_of_dry_mass\": 0.317,\n        \"grain_number\": 5,\n        \"grain_density\": 1815,\n        \"grain_outer_radius\": 0.033,\n        \"grain_initial_inner_radius\": 0.015,\n        \"grain_initial_height\": 0.12,\n        \"grains_center_of_mass_position\": -0.85704,\n        \"grain_separation\": 0.005,\n        \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n        \"nozzle_radius\": 0.033,\n        \"throat_radius\": 0.011,\n        \"interpolation_method\": \"linear\",\n        \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n    },\n    \"nose\": {\n        \"length\": 0.55829,\n        \"kind\": \"vonKarman\",\n        \"position\": 1.278,\n        \"base_radius\": 0.0635,\n        \"rocket_radius\": 0.0635\n    },\n    \"fins\": {\n        \"n\": 4,\n        \"root_chord\": 0.12,\n        \"tip_chord\": 0.04,\n        \"span\": 0.1,\n        \"position\": -1.04956,\n        \"cant_angle\": 0,\n        \"radius\": 0.0635,\n        \"airfoil\": \"\"\n    },\n    \"tail\": {\n        \"top_radius\": 0.0635,\n        \"bottom_radius\": 0.0435,\n        \"length\": 0.06,\n        \"position\": -1.194656,\n        \"radius\": 0.0635\n    },\n    \"parachutes\": {\n        \"name\": [\n            \"Main\",\n            \"Drogue\"\n        ],\n        \"cd_s\": [\n            10,\n            1\n        ],\n        \"sampling_rate\": [\n            105,\n            105\n        ],\n        \"lag\": [\n            1.5,\n            1.5\n        ],\n        \"noise\": [\n            [\n                0,\n                8.3,\n                0.5\n            ],\n            [\n                0,\n                8.3,\n                0.5\n            ]\n        ],\n        \"triggers\": [\n            \"lambda p, h, y: y[5] < 0 and h < 800\",\n            \"lambda p, h, y: y[5] < 0\"\n        ]\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/rockets/{{rocket_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69f2fce0-b400-433a-99c5-a3f9b23025d8",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Rocket DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_rocket_id).to.eql(pm.collectionVariables.get('rocket_id'), \"rocket_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ef84a602-93c3-4269-a9bd-a053872ffc9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}"
					},
					"response": []
				}
			],
			"id": "bc442c9e-2fe7-497a-97ef-9e7f81c81663"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "40d67019-ac44-434c-92b0-e0ecff25d2ef",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b2384886-ce3d-4275-ad7f-247bfdc63f23",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9391d375-db24-4e69-baa2-de23ff9a404c",
			"key": "env_id",
			"value": ""
		},
		{
			"id": "a300ed9c-94b4-4dc5-9a61-6f7627aaf242",
			"key": "latitude",
			"value": ""
		},
		{
			"id": "b84d09c5-2348-427a-84d3-0ee32213673e",
			"key": "longitude",
			"value": ""
		},
		{
			"id": "badf2bea-6205-40b2-b26e-151d00aeaf88",
			"key": "elevation",
			"value": ""
		},
		{
			"id": "a892a13c-04e7-438d-a76f-8510b782496b",
			"key": "standard_atmosphere",
			"value": ""
		},
		{
			"id": "6ee6fae9-674a-49f2-ac95-36a78b4a206e",
			"key": "atmospheric_model_type",
			"value": ""
		},
		{
			"id": "7c63d543-8e77-41db-8a52-8db837b959d9",
			"key": "atmospheric_model_file",
			"value": ""
		},
		{
			"id": "d0648126-149c-4fce-b68b-f494b7f59c67",
			"key": "date",
			"value": ""
		},
		{
			"id": "9dc129af-8036-4f5f-af7f-7986ec22a7f0",
			"key": "rail_length",
			"value": ""
		},
		{
			"id": "9030664e-2a8a-41b3-b1ab-f3340b77afef",
			"key": "inclination",
			"value": ""
		},
		{
			"id": "4bb21347-5783-4011-9a3b-98f48f7795a8",
			"key": "heading",
			"value": ""
		},
		{
			"id": "7a082f27-a042-4557-8fa6-42dbb603ddf2",
			"key": "flight_id",
			"value": ""
		},
		{
			"id": "b1624663-c452-476f-adec-c35477bb8cd4",
			"key": "radius",
			"value": ""
		},
		{
			"id": "77f3ebb5-eb73-493b-994d-61376dc17a35",
			"key": "mass",
			"value": ""
		},
		{
			"id": "09f3dd62-154e-4929-8ea3-c9bbb34bf5cb",
			"key": "inertia",
			"value": ""
		},
		{
			"id": "64137cb8-fa69-4927-80a1-8180ec678a36",
			"key": "power_off_drag",
			"value": ""
		},
		{
			"id": "f21051cc-daa8-48cf-af02-13204313096f",
			"key": "power_on_drag",
			"value": ""
		},
		{
			"id": "23d54b01-9b4b-4848-bd74-225b43fe4e64",
			"key": "center_of_mass_without_motor",
			"value": ""
		},
		{
			"id": "266d842a-3ef9-407f-9205-a7c87ff937b4",
			"key": "motor_position",
			"value": ""
		},
		{
			"id": "469b58d0-fb09-4c13-8f21-e11b8af1d077",
			"key": "rail_buttons",
			"value": ""
		},
		{
			"id": "3a6cf73e-8f6f-4398-8642-64eb28075cda",
			"key": "upper_button_position",
			"value": ""
		},
		{
			"id": "dbacfabc-0c4f-4fc4-8d5c-dcb86ec09888",
			"key": "lower_button_position",
			"value": ""
		},
		{
			"id": "43cfad7d-8022-4899-83ca-ce112b2d5cad",
			"key": "angular_position",
			"value": ""
		},
		{
			"id": "97d6ac41-a482-4bfd-a701-4ea18fe172a6",
			"key": "burn_time",
			"value": ""
		},
		{
			"id": "91daee6e-08e7-4ae7-9522-fdbd14f8fc76",
			"key": "dry_mass",
			"value": ""
		},
		{
			"id": "dda9ca7f-0b7c-4fce-862c-063c4a2d4bca",
			"key": "dry_inertia",
			"value": ""
		},
		{
			"id": "1c2ff7c1-361b-4574-88c4-b224aa4c751e",
			"key": "center_of_dry_mass",
			"value": ""
		},
		{
			"id": "232a048e-d6b4-4e4e-9907-9433f88a7ebf",
			"key": "grain_number",
			"value": ""
		},
		{
			"id": "010744dc-707f-4e08-a091-17df802c87fe",
			"key": "grain_density",
			"value": ""
		},
		{
			"id": "093d6ca3-e4b5-43c5-a2ae-8d0ef19edf0d",
			"key": "grain_outer_radius",
			"value": ""
		},
		{
			"id": "4943b597-0255-4a65-a092-348ce8bd10ab",
			"key": "grain_initial_inner_radius",
			"value": ""
		},
		{
			"id": "8b7c32d8-3802-4e90-9ea3-d3740c3d27a0",
			"key": "grain_initial_height",
			"value": ""
		},
		{
			"id": "05afdbd6-43db-4cc5-9596-c7e6ee509688",
			"key": "grains_center_of_mass_position",
			"value": ""
		},
		{
			"id": "53fb9e99-e637-42f2-a439-077e35472f61",
			"key": "grain_separation",
			"value": ""
		},
		{
			"id": "9f2a9fc3-6f7c-4132-aaf5-f08b4d16013a",
			"key": "thrust_source",
			"value": ""
		},
		{
			"id": "b44b2aff-e959-4f0b-bafd-65562e2c4732",
			"key": "nozzle_radius",
			"value": ""
		},
		{
			"id": "04dac7c3-0441-45ab-8188-f77d9a1a9163",
			"key": "throat_radius",
			"value": ""
		},
		{
			"id": "1805c8a1-78ef-40ec-af2d-fb9d708d73de",
			"key": "interpolation_method",
			"value": ""
		},
		{
			"id": "7fe395e1-3285-46da-82ec-3416e153a4a4",
			"key": "coordinate_system_orientation",
			"value": ""
		},
		{
			"id": "89ce3b81-e72c-4417-8acf-998b36e4a829",
			"key": "length",
			"value": ""
		},
		{
			"id": "b088e623-88df-4c1b-808b-19a9a0f8624d",
			"key": "kind",
			"value": ""
		},
		{
			"id": "d816f68e-bedb-476b-aed4-2dd04d5456d2",
			"key": "position",
			"value": ""
		},
		{
			"id": "c461b4a6-b21f-428c-a17a-9613b32a2bbd",
			"key": "base_radius",
			"value": ""
		},
		{
			"id": "38c3b989-ba2f-4293-a951-d1953d77ead4",
			"key": "rocket_radius",
			"value": ""
		},
		{
			"id": "edcc7e60-7812-4502-aa14-af644f505acf",
			"key": "n",
			"value": ""
		},
		{
			"id": "a81810e2-627d-401c-b976-cbe46f91de06",
			"key": "root_chord",
			"value": ""
		},
		{
			"id": "70539f18-2a05-43b9-ac0d-71559dee8c05",
			"key": "tip_chord",
			"value": ""
		},
		{
			"id": "00114818-84bd-40ac-ab1f-c54162887078",
			"key": "span",
			"value": ""
		},
		{
			"id": "4597ec0f-5e7b-4537-85a3-53ac008eb604",
			"key": "cant_angle",
			"value": ""
		},
		{
			"id": "6d94846c-0841-404f-9768-e15f2ce4777a",
			"key": "airfoil",
			"value": ""
		},
		{
			"id": "62778781-cb61-4781-a0bd-317fde93f224",
			"key": "top_radius",
			"value": ""
		},
		{
			"id": "2806528b-a203-4e41-87cb-581ede48db0a",
			"key": "bottom_radius",
			"value": ""
		},
		{
			"id": "2884a395-a71a-440f-b2f5-64157cb2d5e1",
			"key": "parachutes_names",
			"value": ""
		},
		{
			"id": "1c62ff68-78d0-44e2-9945-66c2d9e9b21e",
			"key": "parachutes_cds",
			"value": ""
		},
		{
			"id": "bd34fecd-5d4a-4aea-948b-5641f6d2c422",
			"key": "parachutes_sampling_rate",
			"value": ""
		},
		{
			"id": "f6404954-7d12-4c5d-a5d7-c992b930f721",
			"key": "parachutes_lags",
			"value": ""
		},
		{
			"id": "da110a60-e796-4123-a280-b8f1e166564e",
			"key": "parachutes_noises",
			"value": ""
		},
		{
			"id": "aeb92ed8-e55c-4e62-9f70-66d726f28f51",
			"key": "parachutes_triggers",
			"value": ""
		},
		{
			"id": "d4e993e2-e412-4a6a-82ec-e2759aab5751",
			"key": "nose_length",
			"value": ""
		},
		{
			"id": "92cd04cd-71a1-4e37-965a-2c511cc866bd",
			"key": "nose_position",
			"value": ""
		},
		{
			"id": "1357f462-6e27-4f54-ac31-7a57ac1593b3",
			"key": "fin_position",
			"value": ""
		},
		{
			"id": "f3f5aa5a-d6e7-4992-9b85-ca9be4b53899",
			"key": "fin_radius",
			"value": ""
		},
		{
			"id": "14b83cd6-93c5-49a5-bc0c-ca962c67923d",
			"key": "tail_length",
			"value": ""
		},
		{
			"id": "9538e540-8c84-4200-81a0-d2f888a5a9f9",
			"key": "tail_position",
			"value": ""
		},
		{
			"id": "90c9b16d-d887-41b4-8daa-d50aa7d5a3a5",
			"key": "tail_radius",
			"value": ""
		},
		{
			"id": "e9ba6a73-2197-4a3b-b7ee-db6791f1b40c",
			"key": "rocket_coordinate_system_orientation",
			"value": ""
		},
		{
			"id": "7671ac39-2fa2-486f-be7c-68a236d0bf08",
			"key": "motor_coordinate_system_orientation",
			"value": ""
		},
		{
			"id": "2ba7fb05-a6dd-4712-a002-9ef47aec2f23",
			"key": "motor_id",
			"value": ""
		},
		{
			"id": "fe9ce1dc-a91a-4062-9ed9-ecc684e46576",
			"key": "rocket_id",
			"value": ""
		}
	]
}