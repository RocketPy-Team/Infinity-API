{
	"info": {
		"_postman_id": "00c970b2-c429-4ecd-a1f7-de23aa286d10",
		"name": "Infinity-API",
		"description": "# About this collection\n\nThe API under this collection includes four artifacts **{Environment, Flight, Motor and Rocket}** with 6 endpoints each covering artifact **creation, reading, editing, deleting, simulating and retrieving artifact as jsonpickle string.**\n\n- POST `api/artifact/{{artifact_id}}` { message, artifact_id }\n    \n- GET `api/artifact/{{artifact_id}}` { Artifact }\n    \n- GET `api/rocketpy/artifact/{{artifact_id}}` { json_pickle_string_artifact }\n    \n- GET `api/simulate/artifact/{{artifact_id}}` { ArtifactSimulationSummary }\n    \n- PUT `api/artifact/{{artifact_id}}` { message, new_artifact_id }\n    \n- DELETE `api/artifact/{{artifact_id}}` { deleted_artifact_id, message }\n    \n\n**Flight artifact** have also additional routes that allows to update its own artifacts.\n\n- POST `api/flight/{{flight_id}}/artifact/` { message, flight_id }\n    \n\n## **Disclaimer**\n\nCurrently the API only supports Solid motors and TrapezoidalFins, sorry for that, we are working to expand its capabilities soon.\n\n## **Using this collection**\n\n- Run this collection by clicking on \"Run\".\n    \n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"266\" height=\"103\">\n\n## Additional resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Environment",
			"item": [
				{
					"name": "Create Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8c2babe-0bd8-4615-8c53-3fb459b61eea",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var envRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce date for future assert",
									"envRequest.date = envRequest.date.substring(0, envRequest.date.length - 7);",
									"",
									"// save environment parameters",
									"pm.environment.set('env_id', apiRspn.env_id)        ",
									"pm.environment.set('latitude', envRequest.latitude)",
									"pm.environment.set('longitude', envRequest.longitude)",
									"pm.environment.set('elevation', envRequest.elevation)      ",
									"pm.environment.set('atmospheric_model_type', envRequest.atmospheric_model_type)    ",
									"pm.environment.set('atmospheric_model_file', envRequest.atmospheric_model_file)            ",
									"pm.environment.set('date', envRequest.date)        ",
									"",
									"//TEST",
									"bdd = \"Given a valid environment POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment successfully created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid env_id\", function () {",
									"        pm.expect(apiRspn.env_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7fa4f532-684a-4524-a972-8b0efdf3509c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58dba9a8-4d10-446a-89c2-17c20f1e3c61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"elevation\": 1400,\n    \"atmospheric_model_type\": \"standard_atmosphere\",\n    \"atmospheric_model_file\": \"GFS\",\n    \"date\": \"2023-05-09T16:30:50.065992\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/environments/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3a96f07-1fbf-4b8b-973f-198d4b3009ec",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"var returned_date = apiRspn.date;",
									"var reduced_returned_date = returned_date.substring(0, returned_date.length - 7);",
									"",
									"//TEST",
									"bdd = \"Given a valid Environment GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid environment\", function () {",
									"        pm.expect(apiRspn.latitude).to.eql(pm.environment.get('latitude'), \"latitude not matching\");",
									"        pm.expect(apiRspn.longitude).to.eql(pm.environment.get('longitude'), \"longitude not matching\");        ",
									"        pm.expect(apiRspn.elevation).to.eql(pm.environment.get('elevation'), \"elevation not matching\");",
									"        pm.expect(apiRspn.atmospheric_model_type).to.eql(pm.environment.get('atmospheric_model_type'), \"atmospheric_model_type not matching\");",
									"        pm.expect(apiRspn.atmospheric_model_file).to.eql(pm.environment.get('atmospheric_model_file'), \"atmospheric_model_file not matching\");",
									"        pm.expect(reduced_returned_date).to.eql(pm.environment.get('date'), \"date not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7bb4dc60-b0de-4e62-9dd5-43fc4ee8df7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1de55e1b-9f5e-4b61-a3dc-0cbefaaeca9b",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Environment GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_env).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dbd3269d-2918-43fc-b73f-95b2e71a051c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/rocketpy/{{env_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcb96b2e-115d-4dad-aa36-3d81e3b43271",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Environment simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.env_data).to.exist;        ",
									"        //pm.expect(apiRspn.env_data.grav).to.exist;   ",
									"        pm.expect(apiRspn.env_data.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_data.model_type_max_expected_height).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_direction).to.exist;",
									"        pm.expect(apiRspn.env_data.wind_heading).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_pressure).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_temperature).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_air_density).to.exist;",
									"        pm.expect(apiRspn.env_data.surface_speed_of_sound).to.exist;",
									"        pm.expect(apiRspn.env_data.launch_date).to.exist;",
									"        pm.expect(apiRspn.env_data.lat).to.eql(pm.environment.get('latitude'), \"latitude not matching\");",
									"        pm.expect(apiRspn.env_data.lon).to.eql(pm.environment.get('longitude'), \"longitude not matching\");        ",
									"        pm.expect(apiRspn.env_data.elevation).to.eql(pm.environment.get('elevation'), \"elevation not matching\");",
									"        pm.expect(apiRspn.env_data.model_type).to.eql(pm.environment.get('atmospheric_model_type'), \"atmospheric_model_type not matching\");      ",
									"",
									"        pm.expect(apiRspn.env_plots).to.exist;     ",
									"        pm.expect(apiRspn.env_plots.grid).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_speed).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_direction).to.exist;",
									"        pm.expect(apiRspn.env_plots.speed_of_sound).to.exist;",
									"        pm.expect(apiRspn.env_plots.density).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_vel_x).to.exist;",
									"        pm.expect(apiRspn.env_plots.wind_vel_y).to.exist;",
									"        pm.expect(apiRspn.env_plots.pressure).to.exist;",
									"        pm.expect(apiRspn.env_plots.temperature).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f309af57-9ee8-46b5-85de-26638bac2f01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97efc8e5-c15c-45d8-bd51-7326fbf558d9",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var envRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce date for future assert",
									"envRequest.date = envRequest.date.substring(0, envRequest.date.length - 7);",
									"",
									"// save environment parameters",
									"pm.environment.set('env_id', apiRspn.new_env_id)        ",
									"pm.environment.set('latitude', envRequest.latitude)",
									"pm.environment.set('longitude', envRequest.longitude)",
									"pm.environment.set('elevation', envRequest.elevation)      ",
									"pm.environment.set('atmospheric_model_type', envRequest.atmospheric_model_type)    ",
									"pm.environment.set('atmospheric_model_file', envRequest.atmospheric_model_file)            ",
									"pm.environment.set('date', envRequest.date)        ",
									"",
									"//TEST",
									"bdd = \"Given a valid Environment PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_env_id\", function () {",
									"        pm.expect(apiRspn.new_env_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "446e5696-b0d0-42c0-9cc8-c98cc4365e48",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7a1c30aa-68d0-4333-99d6-521544a4ce96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"elevation\": 1400,\n    \"atmospheric_model_type\": \"standard_atmosphere\",\n    \"atmospheric_model_file\": \"GFS\",\n    \"date\": \"2023-05-09T16:30:50.065992\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/environments/{{env_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27379dc0-69c0-4b12-9913-dda6dfb2b7b9",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Environment DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Environment successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_env_id).to.eql(pm.environment.get('env_id'), \"env_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1acea9b8-2a1c-4951-9a86-b7b74a4975b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/environments/{{env_id}}"
					},
					"response": []
				}
			],
			"id": "8d5169f4-689a-46a4-add6-e09686d53349"
		},
		{
			"name": "Flight",
			"item": [
				{
					"name": "Create Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3663b86-aed1-49a4-bb2e-262d5fba3970",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce environment date for future assertion",
									"flightRequest.environment.date = flightRequest.environment.date.substring(0, flightRequest.environment.date.length - 7);",
									"",
									"// save flight parameters",
									"pm.environment.set('rail_length', flightRequest.rail_length)        ",
									"pm.environment.set('inclination', flightRequest.inclination)",
									"pm.environment.set('heading', flightRequest.heading)",
									"",
									"// flight environment",
									"pm.environment.set('flight_id', apiRspn.flight_id)        ",
									"pm.environment.set('latitude', flightRequest.environment.latitude)",
									"pm.environment.set('longitude', flightRequest.environment.longitude)",
									"pm.environment.set('elevation', flightRequest.environment.elevation)      ",
									"pm.environment.set('atmospheric_model_type', flightRequest.environment.atmospheric_model_type)    ",
									"pm.environment.set('atmospheric_model_file', flightRequest.environment.atmospheric_model_file)            ",
									"pm.environment.set('date', flightRequest.environment.date)        ",
									"",
									"// flight rocket",
									"pm.environment.set('radius', flightRequest.rocket.radius)",
									"pm.environment.set('mass', flightRequest.rocket.mass)",
									"pm.environment.set('inertia', flightRequest.rocket.inertia)",
									"pm.environment.set('power_off_drag', flightRequest.rocket.power_off_drag)",
									"pm.environment.set('power_on_drag', flightRequest.rocket.power_on_drag)",
									"pm.environment.set('center_of_mass_without_motor', flightRequest.rocket.center_of_mass_without_motor)",
									"pm.environment.set('motor_position', flightRequest.rocket.motor_position)",
									"pm.environment.set('rail_buttons', flightRequest.rocket.rail_buttons)",
									"pm.environment.set('upper_button_position', flightRequest.rocket.rail_buttons.upper_button_position)",
									"pm.environment.set('lower_button_position', flightRequest.rocket.rail_buttons.lower_button_position)",
									"pm.environment.set('angular_position', flightRequest.rocket.rail_buttons.angular_position)",
									"pm.environment.set('rocket_coordinate_system_orientation', flightRequest.rocket.coordinate_system_orientation)",
									"",
									"// flight rocket motor",
									"pm.environment.set('burn_time', flightRequest.rocket.motor.burn_time)",
									"pm.environment.set('dry_mass', flightRequest.rocket.motor.dry_mass)",
									"pm.environment.set('dry_inertia', flightRequest.rocket.motor.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', flightRequest.rocket.motor.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', flightRequest.rocket.motor.grain_number)",
									"pm.environment.set('grain_density', flightRequest.rocket.motor.grain_density)",
									"pm.environment.set('grain_outer_radius', flightRequest.rocket.motor.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', flightRequest.rocket.motor.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', flightRequest.rocket.motor.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', flightRequest.rocket.motor.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', flightRequest.rocket.motor.grain_separation)",
									"pm.environment.set('thrust_source', flightRequest.rocket.motor.thrust_source)",
									"pm.environment.set('nozzle_radius', flightRequest.rocket.motor.nozzle_radius)",
									"pm.environment.set('throat_radius', flightRequest.rocket.motor.throat_radius)",
									"pm.environment.set('interpolation_method', flightRequest.rocket.motor.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', flightRequest.rocket.motor.coordinate_system_orientation)",
									"",
									"// flight rocket nose",
									"pm.environment.set('nose_length', flightRequest.rocket.nose.length)",
									"pm.environment.set('kind', flightRequest.rocket.nose.kind)",
									"pm.environment.set('nose_position', flightRequest.rocket.nose.position)",
									"pm.environment.set('base_radius', flightRequest.rocket.nose.base_radius)",
									"pm.environment.set('rocket_radius', flightRequest.rocket.nose.rocket_radius)",
									"",
									"// flight rocket fins",
									"pm.environment.set('n', flightRequest.rocket.fins.n)",
									"pm.environment.set('root_chord', flightRequest.rocket.fins.root_chord)",
									"pm.environment.set('tip_chord', flightRequest.rocket.fins.tip_chord)",
									"pm.environment.set('span', flightRequest.rocket.fins.span)",
									"pm.environment.set('fin_position', flightRequest.rocket.fins.position)",
									"pm.environment.set('cant_angle', flightRequest.rocket.fins.cant_angle)",
									"pm.environment.set('fin_radius', flightRequest.rocket.fins.radius)",
									"pm.environment.set('airfoil', flightRequest.rocket.fins.airfoil)",
									"",
									"// flight rocket tail",
									"pm.environment.set('top_radius', flightRequest.rocket.tail.top_radius)",
									"pm.environment.set('bottom_radius', flightRequest.rocket.tail.bottom_radius)",
									"pm.environment.set('tail_length', flightRequest.rocket.tail.length)",
									"pm.environment.set('tail_position', flightRequest.rocket.tail.position)",
									"pm.environment.set('tail_radius', flightRequest.rocket.tail.radius)",
									"",
									"// flight rocket parachute",
									"pm.environment.set('parachutes_names', flightRequest.rocket.parachutes.name)",
									"pm.environment.set('parachutes_cds', flightRequest.rocket.parachutes.cd_s)",
									"pm.environment.set('parachutes_sampling_rate', flightRequest.rocket.parachutes.sampling_rate)",
									"pm.environment.set('parachutes_lags', flightRequest.rocket.parachutes.lag)",
									"pm.environment.set('parachutes_noises', flightRequest.rocket.parachutes.noise)",
									"pm.environment.set('parachutes_triggers', flightRequest.rocket.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight_id\", function () {",
									"        pm.expect(apiRspn.flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1fd947d4-211a-4d05-83f1-5c520945bb66",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99e56989-4c92-4245-a4b7-59cd5d73e1f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rail_length\": 5.2,\n    \"inclination\": 85,\n    \"heading\": 0,\n    \"environment\": {\n        \"latitude\": 0,\n        \"longitude\": 0,\n        \"elevation\": 1405,\n        \"atmospheric_model_type\": \"standard_atmosphere\",\n        \"atmospheric_model_file\": \"GFS\",\n        \"date\": \"2023-05-09T16:30:50.065992\"\n    },\n    \"rocket\": {\n        \"radius\": 0.0632,\n        \"mass\": 16.235,\n        \"inertia\": [\n            6.321, \n            6.321, \n            0.0346\n        ],\n        \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n        \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n        \"center_of_mass_without_motor\": 0,\n        \"coordinate_system_orientation\": \"tail_to_nose\",\n        \"motor_position\": -1.255,\n        \"rail_buttons\": {\n            \"upper_button_position\": -0.5,\n            \"lower_button_position\": 0.2,\n            \"angular_position\": 45\n        },\n        \"motor\": {\n            \"burn_time\": 3.9,\n            \"dry_mass\": 1.815,\n            \"dry_inertia\": [0.125, 0.125, 0.002],\n            \"center_of_dry_mass_position\": 0.317,\n            \"grain_number\": 5,\n            \"grain_density\": 1815,\n            \"grain_outer_radius\": 0.033,\n            \"grain_initial_inner_radius\": 0.015,\n            \"grain_initial_height\": 0.12,\n            \"grains_center_of_mass_position\": -0.85704,\n            \"grain_separation\": 0.005,\n            \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n            \"nozzle_radius\": 0.033,\n            \"throat_radius\": 0.011,\n            \"interpolation_method\": \"linear\",\n            \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n        },\n        \"nose\": {\n            \"length\": 0.55829,\n            \"kind\": \"vonKarman\",\n            \"position\": 1.278,\n            \"base_radius\": 0.0635,\n            \"rocket_radius\": 0.0635\n        },\n        \"fins\": {\n            \"n\": 4,\n            \"root_chord\": 0.12,\n            \"tip_chord\": 0.04,\n            \"span\": 0.1,\n            \"position\": -1.04956,\n            \"cant_angle\": 0,\n            \"radius\": 0.0635,\n            \"airfoil\": \"\"\n        },\n        \"tail\": {\n            \"top_radius\": 0.0635,\n            \"bottom_radius\": 0.0435,\n            \"length\": 0.06,\n            \"position\": -1.194656,\n            \"radius\": 0.0635\n        },\n        \"parachutes\": {\n            \"name\": [\n                \"Main\",\n                \"Drogue\"\n            ],\n            \"cd_s\": [\n                10,\n                1\n            ],\n            \"sampling_rate\": [\n                105,\n                105\n            ],\n            \"lag\": [\n                1.5,\n                1.5\n            ],\n            \"noise\": [\n                [\n                    0,\n                    8.3,\n                    0.5\n                ],\n                [\n                    0,\n                    8.3,\n                    0.5\n                ]\n            ],\n            \"triggers\": [\n                \"lambda p, h, y: y[5] < 0 and h < 800\",\n                \"lambda p, h, y: y[5] < 0\"\n            ]\n        }\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce85536-515d-4c87-b6eb-c7952e8c9dfe",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"var returned_date = apiRspn.environment.date;",
									"var reduced_returned_date = returned_date.substring(0, returned_date.length - 7);",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight \", function () {",
									"        pm.expect(apiRspn.inclination).to.eql(pm.environment.get('inclination'), \"flight inclination not matching\");",
									"        pm.expect(apiRspn.heading).to.eql(pm.environment.get('heading'), \"flight heading not matching\");",
									"        pm.expect(apiRspn.rail_length).to.eql(pm.environment.get('rail_length'), \"flight rail_length not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight environment\", function () {",
									"        pm.expect(apiRspn.environment.longitude).to.eql(pm.environment.get('longitude'), \"environment longitude not matching\");        ",
									"        pm.expect(apiRspn.environment.elevation).to.eql(pm.environment.get('elevation'), \"environment elevation not matching\");",
									"        pm.expect(apiRspn.environment.atmospheric_model_type).to.eql(pm.environment.get('atmospheric_model_type'), \"environment atmospheric_model_type not matching\");",
									"        pm.expect(apiRspn.environment.atmospheric_model_file).to.eql(pm.environment.get('atmospheric_model_file'), \"environment atmospheric_model_file not matching\");",
									"        pm.expect(reduced_returned_date).to.eql(pm.environment.get('date'), \"date not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket\", function () {        ",
									"        pm.expect(apiRspn.rocket.radius).to.eql(pm.environment.get('radius'), \"rocket radius not matching\");",
									"        pm.expect(apiRspn.rocket.mass).to.eql(pm.environment.get('mass'), \"rocket mass not matching\");",
									"        pm.expect(apiRspn.rocket.inertia).to.eql(pm.environment.get('inertia'), \"rocket inertia not matching\");",
									"        pm.expect(apiRspn.rocket.power_off_drag).to.eql(pm.environment.get('power_off_drag'), \"rocket power_off_drag not matching\");",
									"        pm.expect(apiRspn.rocket.power_on_drag).to.eql(pm.environment.get('power_on_drag'), \"rocket power_on_drag not matching\");",
									"        pm.expect(apiRspn.rocket.center_of_mass_without_motor).to.eql(pm.environment.get('center_of_mass_without_motor'), \"rocket center_of_mass_without_motor not matching\");",
									"        pm.expect(apiRspn.rocket.coordinate_system_orientation).to.eql(pm.environment.get('rocket_coordinate_system_orientation'), \"rocket coordinate_system_orientation not matching\");",
									"        pm.expect(apiRspn.rocket.motor_position).to.eql(pm.environment.get('motor_position'), \"rocket motor_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons).to.eql(pm.environment.get('rail_buttons'), \"rocket rail_buttons not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.upper_button_position).to.eql(pm.environment.get('upper_button_position'), \"rocket rail_buttons upper_button_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.lower_button_position).to.eql(pm.environment.get('lower_button_position'), \"rocket rail_buttons lower_button_position not matching\");",
									"        pm.expect(apiRspn.rocket.rail_buttons.angular_position).to.eql(pm.environment.get('angular_position'), \"rocket rail_buttons angular_position not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket motor\", function () {",
									"        pm.expect(apiRspn.rocket.motor.burn_time).to.eql(pm.environment.get('burn_time'), \"rocket motor burn_time not matching\");",
									"        pm.expect(apiRspn.rocket.motor.dry_mass).to.eql(pm.environment.get('dry_mass'), \"rocket motor dry_mass not matching\");",
									"        pm.expect(apiRspn.rocket.motor.dry_inertia).to.eql(pm.environment.get('dry_inertia'), \"rocket motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.rocket.motor.center_of_dry_mass_position).to.eql(pm.environment.get('center_of_dry_mass_position'), \"rocket motor center_of_dry_mass_position not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_number).to.eql(pm.environment.get('grain_number'), \"rocket motor grain_number not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_density).to.eql(pm.environment.get('grain_density'), \"rocket motor grain_density not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_outer_radius).to.eql(pm.environment.get('grain_outer_radius'), \"rocket motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_initial_inner_radius).to.eql(pm.environment.get('grain_initial_inner_radius'), \"rocket motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_initial_height).to.eql(pm.environment.get('grain_initial_height'), \"rocket motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grains_center_of_mass_position).to.eql(pm.environment.get('grains_center_of_mass_position'), \"rocket motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.rocket.motor.thrust_source).to.eql(pm.environment.get('thrust_source'), \"rocket motor thrust_source not matching\");",
									"        pm.expect(apiRspn.rocket.motor.grain_separation).to.eql(pm.environment.get('grain_separation'), \"rocket motor grain_separation not matching\");",
									"        pm.expect(apiRspn.rocket.motor.nozzle_radius).to.eql(pm.environment.get('nozzle_radius'), \"rocket motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.throat_radius).to.eql(pm.environment.get('throat_radius'), \"rocket motor throat_radius not matching\");",
									"        pm.expect(apiRspn.rocket.motor.interpolation_method).to.eql(pm.environment.get('interpolation_method'), \"rocket motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.rocket.motor.coordinate_system_orientation).to.eql(pm.environment.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket nose\", function () {",
									"        pm.expect(apiRspn.rocket.nose.length).to.eql(pm.environment.get('nose_length'), \"rocket nose length not matching\");",
									"        pm.expect(apiRspn.rocket.nose.kind).to.eql(pm.environment.get('kind'), \"rocket nose kind not matching\");",
									"        pm.expect(apiRspn.rocket.nose.position).to.eql(pm.environment.get('nose_position'), \"rocket nose position not matching\");",
									"        pm.expect(apiRspn.rocket.nose.base_radius).to.eql(pm.environment.get('base_radius'), \"rocket nose base_radius not matching\");",
									"        pm.expect(apiRspn.rocket.nose.rocket_radius).to.eql(pm.environment.get('rocket_radius'), \"rocket nose rocket_radius not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket fins\", function () {",
									"        pm.expect(apiRspn.rocket.fins.n).to.eql(pm.environment.get('n'), \"rocket fins 'n' not matching\");",
									"        pm.expect(apiRspn.rocket.fins.root_chord).to.eql(pm.environment.get('root_chord'), \"rocket fins root_chord not matching\");",
									"        pm.expect(apiRspn.rocket.fins.tip_chord).to.eql(pm.environment.get('tip_chord'), \"rocket fins tip_chord not matching\");",
									"        pm.expect(apiRspn.rocket.fins.span).to.eql(pm.environment.get('span'), \"rocket fins span not matching\");",
									"        pm.expect(apiRspn.rocket.fins.position).to.eql(pm.environment.get('fin_position'), \"rocket fins position not matching\");",
									"        pm.expect(apiRspn.rocket.fins.cant_angle).to.eql(pm.environment.get('cant_angle'), \"rocket fins cant_angle not matching\");",
									"        pm.expect(apiRspn.rocket.fins.radius).to.eql(pm.environment.get('fin_radius'), \"rocket fins radius not matching\");",
									"        pm.expect(apiRspn.rocket.fins.airfoil).to.eql(pm.environment.get('airfoil'), \"rocket fins airfoil not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket tail\", function () {",
									"        pm.expect(apiRspn.rocket.tail.top_radius).to.eql(pm.environment.get('top_radius'), \"rocket tail top_radius not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.bottom_radius).to.eql(pm.environment.get('bottom_radius'), \"rocket tail bottom_radius not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.length).to.eql(pm.environment.get('tail_length'), \"rocket tail length not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.position).to.eql(pm.environment.get('tail_position'), \"rocket tail position not matching\");        ",
									"        pm.expect(apiRspn.rocket.tail.radius).to.eql(pm.environment.get('tail_radius'), \"rocket tail radius not matching\");        ",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket parachutes\", function () {",
									"        pm.expect(apiRspn.rocket.parachutes.name).to.eql(pm.environment.get('parachutes_names'), \"rocket parachutes names not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.cd_s).to.eql(pm.environment.get('parachutes_cds'), \"rocket parachutes cd_s not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.sampling_rate).to.eql(pm.environment.get('parachutes_sampling_rate'), \"rocket parachutes sampling_rate not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.lag).to.eql(pm.environment.get('parachutes_lags'), \"rocket parachutes lags not matching\");                ",
									"        pm.expect(apiRspn.rocket.parachutes.noise).to.eql(pm.environment.get('parachutes_noises'), \"rocket parachutes noises not matching\");",
									"        pm.expect(apiRspn.rocket.parachutes.triggers).to.eql(pm.environment.get('parachutes_triggers'), \"rocket parachutes triggers not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f237345-757f-44c2-87cb-ec825aaef134",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7281700-d640-47e5-a76b-94ee473bc5b1",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Flight GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_flight).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d8906f8-9d62-4b94-b5e3-c6daa0fe5074",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/rocketpy/{{flight_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ab40eac-3961-47a2-bd03-0fc9746f8203",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Flight simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.flight_data).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_angular_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.initial_conditions.initial_angular_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.max_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.max_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.min_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.relative_error_tolerance).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.absolute_error_tolerance).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.time_overshoot).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.terminate_on_apogee).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.number_of_time_steps).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.function_evaluations_per_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.numerical_integration_settings.avg_function_evaluations_per_time_step).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.rail_length).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.flight_inclination).to.exist;",
									"        pm.expect(apiRspn.flight_data.launch_rail_conditions.flight_heading).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions.frontal_surface_wind_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.surface_wind_conditions.lateral_surface_wind_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_static_margin).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_angle_of_attack).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_thrust_weight_ratio).to.exist;",
									"        pm.expect(apiRspn.flight_data.out_of_rail_conditions.out_of_rail_reynolds_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_rocket_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_freestream_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_mach_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.burnout_conditions.burnout_kinetic_energy).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_time).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_altitude).to.exist;",
									"        pm.expect(apiRspn.flight_data.apogee_conditions.apogee_freestream_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_speed).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_mach_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_reynolds_number).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_dynamic_pressure).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_acceleration_during_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_acceleration_after_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_gs_during_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_gs_after_motor_burn).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_upper_rail_button_normal_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_upper_rail_button_shear_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_lower_rail_button_normal_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.maximum_values.maximum_lower_rail_button_shear_force).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.x_impact_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.y_impact_position).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.time_of_impact).to.exist;",
									"        pm.expect(apiRspn.flight_data.impact_conditions.impact_velocity).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace.Drogue).to.exist;",
									"        pm.expect(apiRspn.flight_data.events_registered.events_trace.Main).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4264e691-b0fe-4d6b-a88e-dcdd09dccb9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "faf35bda-1c3b-4478-a523-8f801c2f8a11",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// reduce environment date for future assertion",
									"flightRequest.environment.date = flightRequest.environment.date.substring(0, flightRequest.environment.date.length - 7);",
									"",
									"// save flight parameters",
									"pm.environment.set('flight_id', apiRspn.new_flight_id)        ",
									"pm.environment.set('rail_length', flightRequest.rail_length)        ",
									"pm.environment.set('inclination', flightRequest.inclination)",
									"pm.environment.set('heading', flightRequest.heading)",
									"",
									"// flight environment",
									"pm.environment.set('latitude', flightRequest.environment.latitude)",
									"pm.environment.set('longitude', flightRequest.environment.longitude)",
									"pm.environment.set('elevation', flightRequest.environment.elevation)      ",
									"pm.environment.set('atmospheric_model_type', flightRequest.environment.atmospheric_model_type)    ",
									"pm.environment.set('atmospheric_model_file', flightRequest.environment.atmospheric_model_file)            ",
									"pm.environment.set('date', flightRequest.environment.date)        ",
									"",
									"// flight rocket",
									"pm.environment.set('radius', flightRequest.rocket.radius)",
									"pm.environment.set('mass', flightRequest.rocket.mass)",
									"pm.environment.set('inertia', flightRequest.rocket.inertia)",
									"pm.environment.set('power_off_drag', flightRequest.rocket.power_off_drag)",
									"pm.environment.set('power_on_drag', flightRequest.rocket.power_on_drag)",
									"pm.environment.set('center_of_mass_without_motor', flightRequest.rocket.center_of_mass_without_motor)",
									"pm.environment.set('motor_position', flightRequest.rocket.motor_position)",
									"pm.environment.set('rail_buttons', flightRequest.rocket.rail_buttons)",
									"pm.environment.set('upper_button_position', flightRequest.rocket.rail_buttons.upper_button_position)",
									"pm.environment.set('lower_button_position', flightRequest.rocket.rail_buttons.lower_button_position)",
									"pm.environment.set('angular_position', flightRequest.rocket.rail_buttons.angular_position)",
									"pm.environment.set('rocket_coordinate_system_orientation', flightRequest.rocket.coordinate_system_orientation)",
									"",
									"// flight rocket motor",
									"pm.environment.set('burn_time', flightRequest.rocket.motor.burn_time)",
									"pm.environment.set('dry_mass', flightRequest.rocket.motor.dry_mass)",
									"pm.environment.set('dry_inertia', flightRequest.rocket.motor.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', flightRequest.rocket.motor.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', flightRequest.rocket.motor.grain_number)",
									"pm.environment.set('grain_density', flightRequest.rocket.motor.grain_density)",
									"pm.environment.set('grain_outer_radius', flightRequest.rocket.motor.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', flightRequest.rocket.motor.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', flightRequest.rocket.motor.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', flightRequest.rocket.motor.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', flightRequest.rocket.motor.grain_separation)",
									"pm.environment.set('thrust_source', flightRequest.rocket.motor.thrust_source)",
									"pm.environment.set('nozzle_radius', flightRequest.rocket.motor.nozzle_radius)",
									"pm.environment.set('throat_radius', flightRequest.rocket.motor.throat_radius)",
									"pm.environment.set('interpolation_method', flightRequest.rocket.motor.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', flightRequest.rocket.motor.coordinate_system_orientation)",
									"",
									"// flight rocket nose",
									"pm.environment.set('nose_length', flightRequest.rocket.nose.length)",
									"pm.environment.set('kind', flightRequest.rocket.nose.kind)",
									"pm.environment.set('nose_position', flightRequest.rocket.nose.position)",
									"pm.environment.set('base_radius', flightRequest.rocket.nose.base_radius)",
									"pm.environment.set('rocket_radius', flightRequest.rocket.nose.rocket_radius)",
									"",
									"// flight rocket fins",
									"pm.environment.set('n', flightRequest.rocket.fins.n)",
									"pm.environment.set('root_chord', flightRequest.rocket.fins.root_chord)",
									"pm.environment.set('tip_chord', flightRequest.rocket.fins.tip_chord)",
									"pm.environment.set('span', flightRequest.rocket.fins.span)",
									"pm.environment.set('fin_position', flightRequest.rocket.fins.position)",
									"pm.environment.set('cant_angle', flightRequest.rocket.fins.cant_angle)",
									"pm.environment.set('fin_radius', flightRequest.rocket.fins.radius)",
									"pm.environment.set('airfoil', flightRequest.rocket.fins.airfoil)",
									"",
									"// flight rocket tail",
									"pm.environment.set('top_radius', flightRequest.rocket.tail.top_radius)",
									"pm.environment.set('bottom_radius', flightRequest.rocket.tail.bottom_radius)",
									"pm.environment.set('tail_length', flightRequest.rocket.tail.length)",
									"pm.environment.set('tail_position', flightRequest.rocket.tail.position)",
									"pm.environment.set('tail_radius', flightRequest.rocket.tail.radius)",
									"",
									"// flight rocket parachute",
									"pm.environment.set('parachutes_names', flightRequest.rocket.parachutes.name)",
									"pm.environment.set('parachutes_cds', flightRequest.rocket.parachutes.cd_s)",
									"pm.environment.set('parachutes_sampling_rate', flightRequest.rocket.parachutes.sampling_rate)",
									"pm.environment.set('parachutes_lags', flightRequest.rocket.parachutes.lag)",
									"pm.environment.set('parachutes_noises', flightRequest.rocket.parachutes.noise)",
									"pm.environment.set('parachutes_triggers', flightRequest.rocket.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_flight_id\", function () {",
									"        pm.expect(apiRspn.new_flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c39c5aee-cdfc-4304-ae91-3a722d0fac98",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9db43e15-4423-4cf6-8fbe-2d75ad16fea6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rail_length\": 5.2,\n    \"inclination\": 85,\n    \"heading\": 0,\n    \"environment\": {\n        \"latitude\": 0,\n        \"longitude\": 0,\n        \"elevation\": 1405,\n        \"atmospheric_model_type\": \"standard_atmosphere\",\n        \"atmospheric_model_file\": \"GFS\",\n        \"date\": \"2023-05-09T16:30:50.065992\"\n    },\n    \"rocket\": {\n        \"radius\": 0.0632,\n        \"mass\": 16.235,\n        \"inertia\": [\n            6.321, \n            6.321, \n            0.0346\n        ],\n        \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n        \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n        \"center_of_mass_without_motor\": 0,\n        \"coordinate_system_orientation\": \"tail_to_nose\",\n        \"motor_position\": -1.255,\n        \"rail_buttons\": {\n            \"upper_button_position\": -0.5,\n            \"lower_button_position\": 0.2,\n            \"angular_position\": 45\n        },\n        \"motor\": {\n            \"burn_time\": 3.9,\n            \"dry_mass\": 1.815,\n            \"dry_inertia\": [0.125, 0.125, 0.002],\n            \"center_of_dry_mass_position\": 0.317,\n            \"grain_number\": 5,\n            \"grain_density\": 1815,\n            \"grain_outer_radius\": 0.033,\n            \"grain_initial_inner_radius\": 0.015,\n            \"grain_initial_height\": 0.12,\n            \"grains_center_of_mass_position\": -0.85704,\n            \"grain_separation\": 0.005,\n            \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n            \"nozzle_radius\": 0.033,\n            \"throat_radius\": 0.011,\n            \"interpolation_method\": \"linear\",\n            \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n        },\n        \"nose\": {\n            \"length\": 0.55829,\n            \"kind\": \"vonKarman\",\n            \"position\": 1.278,\n            \"base_radius\": 0.0635,\n            \"rocket_radius\": 0.0635\n        },\n        \"fins\": {\n            \"n\": 4,\n            \"root_chord\": 0.12,\n            \"tip_chord\": 0.04,\n            \"span\": 0.1,\n            \"position\": -1.04956,\n            \"cant_angle\": 0,\n            \"radius\": 0.0635,\n            \"airfoil\": \"\"\n        },\n        \"tail\": {\n            \"top_radius\": 0.0635,\n            \"bottom_radius\": 0.0435,\n            \"length\": 0.06,\n            \"position\": -1.194656,\n            \"radius\": 0.0635\n        },\n        \"parachutes\": {\n            \"name\": [\n                \"Main\",\n                \"Drogue\"\n            ],\n            \"cd_s\": [\n                10,\n                1\n            ],\n            \"sampling_rate\": [\n                105,\n                105\n            ],\n            \"lag\": [\n                1.5,\n                1.5\n            ],\n            \"noise\": [\n                [\n                    0,\n                    8.3,\n                    0.5\n                ],\n                [\n                    0,\n                    8.3,\n                    0.5\n                ]\n            ],\n            \"triggers\": [\n                \"lambda p, h, y: y[5] < 0 and h < 800\",\n                \"lambda p, h, y: y[5] < 0\"\n            ]\n        }\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/{{flight_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Update Flight Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "faf35bda-1c3b-4478-a523-8f801c2f8a11",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save new flight id",
									"pm.environment.set('flight_id', apiRspn.new_flight_id)        ",
									"",
									"// save environment parameters",
									"pm.environment.set('env_id', apiRspn.new_env_id)        ",
									"pm.environment.set('latitude', flightRequest.latitude)",
									"pm.environment.set('longitude', flightRequest.longitude)",
									"pm.environment.set('elevation', flightRequest.elevation)      ",
									"pm.environment.set('atmospheric_model_type', flightRequest.atmospheric_model_type)    ",
									"pm.environment.set('atmospheric_model_file', flightRequest.atmospheric_model_file)            ",
									"pm.environment.set('date', flightRequest.date)    ",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_flight_id\", function () {",
									"        pm.expect(apiRspn.new_flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c39c5aee-cdfc-4304-ae91-3a722d0fac98",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dfa720d0-3994-4cce-abde-c4021e46c7e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"elevation\": 1400,\n    \"atmospheric_model_type\": \"standard_atmosphere\",\n    \"atmospheric_model_file\": \"GFS\",\n    \"date\": \"2023-05-09T16:30:50.065992\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/{{flight_id}}/env",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Update Flight Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "faf35bda-1c3b-4478-a523-8f801c2f8a11",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var flightRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save new flight id",
									"pm.environment.set('flight_id', apiRspn.new_flight_id)        ",
									"",
									"// save rocket parameters",
									"pm.environment.set('rocket_id', apiRspn.new_rocket_id)",
									"pm.environment.set('radius', flightRequest.radius)",
									"pm.environment.set('mass', flightRequest.mass)",
									"pm.environment.set('inertia', flightRequest.inertia)",
									"pm.environment.set('power_off_drag', flightRequest.power_off_drag)",
									"pm.environment.set('power_on_drag', flightRequest.power_on_drag)",
									"pm.environment.set('center_of_mass_without_motor', flightRequest.center_of_mass_without_motor)",
									"pm.environment.set('motor_position', flightRequest.motor_position)",
									"pm.environment.set('rail_buttons', flightRequest.rail_buttons)",
									"pm.environment.set('upper_button_position', flightRequest.rail_buttons.upper_button_position)",
									"pm.environment.set('lower_button_position', flightRequest.rail_buttons.lower_button_position)",
									"pm.environment.set('angular_position', flightRequest.rail_buttons.angular_position)",
									"pm.environment.set('rocket_coordinate_system_orientation', flightRequest.coordinate_system_orientation)",
									"",
									"// rocket motor",
									"pm.environment.set('burn_time', flightRequest.motor.burn_time)",
									"pm.environment.set('dry_mass', flightRequest.motor.dry_mass)",
									"pm.environment.set('dry_inertia', flightRequest.motor.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', flightRequest.motor.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', flightRequest.motor.grain_number)",
									"pm.environment.set('grain_density', flightRequest.motor.grain_density)",
									"pm.environment.set('grain_outer_radius', flightRequest.motor.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', flightRequest.motor.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', flightRequest.motor.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', flightRequest.motor.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', flightRequest.motor.grain_separation)",
									"pm.environment.set('thrust_source', flightRequest.motor.thrust_source)",
									"pm.environment.set('nozzle_radius', flightRequest.motor.nozzle_radius)",
									"pm.environment.set('throat_radius', flightRequest.motor.throat_radius)",
									"pm.environment.set('interpolation_method', flightRequest.motor.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', flightRequest.motor.coordinate_system_orientation)",
									"",
									"// rocket nose",
									"pm.environment.set('nose_length', flightRequest.nose.length)",
									"pm.environment.set('kind', flightRequest.nose.kind)",
									"pm.environment.set('nose_position', flightRequest.nose.position)",
									"pm.environment.set('base_radius', flightRequest.nose.base_radius)",
									"pm.environment.set('rocket_radius', flightRequest.nose.rocket_radius)",
									"",
									"// rocket fins",
									"pm.environment.set('n', flightRequest.fins.n)",
									"pm.environment.set('root_chord', flightRequest.fins.root_chord)",
									"pm.environment.set('tip_chord', flightRequest.fins.tip_chord)",
									"pm.environment.set('span', flightRequest.fins.span)",
									"pm.environment.set('fin_position', flightRequest.fins.position)",
									"pm.environment.set('cant_angle', flightRequest.fins.cant_angle)",
									"pm.environment.set('fin_radius', flightRequest.fins.radius)",
									"pm.environment.set('airfoil', flightRequest.fins.airfoil)",
									"",
									"// rocket tail",
									"pm.environment.set('top_radius', flightRequest.tail.top_radius)",
									"pm.environment.set('bottom_radius', flightRequest.tail.bottom_radius)",
									"pm.environment.set('tail_length', flightRequest.tail.length)",
									"pm.environment.set('tail_position', flightRequest.tail.position)",
									"pm.environment.set('tail_radius', flightRequest.tail.radius)",
									"",
									"// rocket parachute",
									"pm.environment.set('parachutes_names', flightRequest.parachutes.name)",
									"pm.environment.set('parachutes_cds', flightRequest.parachutes.cd_s)",
									"pm.environment.set('parachutes_sampling_rate', flightRequest.parachutes.sampling_rate)",
									"pm.environment.set('parachutes_lags', flightRequest.parachutes.lag)",
									"pm.environment.set('parachutes_noises', flightRequest.parachutes.noise)",
									"pm.environment.set('parachutes_triggers', flightRequest.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Flight PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_flight_id\", function () {",
									"        pm.expect(apiRspn.new_flight_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c39c5aee-cdfc-4304-ae91-3a722d0fac98",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "194a4296-299e-4d76-ac19-2ff5761f7de6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"radius\": 0.0632,\n    \"mass\": 16.235,\n    \"inertia\": [\n        6.321, \n        6.321, \n        0.0346\n    ],\n    \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n    \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n    \"center_of_mass_without_motor\": 0,\n    \"coordinate_system_orientation\": \"tail_to_nose\",\n    \"motor_position\": -1.255,\n    \"rail_buttons\": {\n        \"upper_button_position\": -0.5,\n        \"lower_button_position\": 0.2,\n        \"angular_position\": 45\n    },\n    \"motor\": {\n        \"burn_time\": 3.9,\n        \"dry_mass\": 1.815,\n        \"dry_inertia\": [0.125, 0.125, 0.002],\n        \"center_of_dry_mass_position\": 0.317,\n        \"grain_number\": 5,\n        \"grain_density\": 1815,\n        \"grain_outer_radius\": 0.033,\n        \"grain_initial_inner_radius\": 0.015,\n        \"grain_initial_height\": 0.12,\n        \"grains_center_of_mass_position\": -0.85704,\n        \"grain_separation\": 0.005,\n        \"thrust_source\": \"Cesaroni_M1670\",            \n        \"nozzle_radius\": 0.033,\n        \"throat_radius\": 0.011,\n        \"interpolation_method\": \"linear\",\n        \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n    },\n    \"nose\": {\n        \"length\": 0.55829,\n        \"kind\": \"vonKarman\",\n        \"position\": 1.278,\n        \"base_radius\": 0.0635,\n        \"rocket_radius\": 0.0635\n    },\n    \"fins\": {\n        \"n\": 4,\n        \"root_chord\": 0.12,\n        \"tip_chord\": 0.04,\n        \"span\": 0.1,\n        \"position\": -1.04956,\n        \"cant_angle\": 0,\n        \"radius\": 0.0635,\n        \"airfoil\": \"\"\n    },\n    \"tail\": {\n        \"top_radius\": 0.0635,\n        \"bottom_radius\": 0.0435,\n        \"length\": 0.06,\n        \"position\": -1.194656,\n        \"radius\": 0.0635\n    },\n    \"parachutes\": {\n        \"name\": [\n            \"Main\",\n            \"Drogue\"\n        ],\n        \"cd_s\": [\n            10,\n            1\n        ],\n        \"sampling_rate\": [\n            105,\n            105\n        ],\n        \"lag\": [\n            1.5,\n            1.5\n        ],\n        \"noise\": [\n            [\n                0,\n                8.3,\n                0.5\n            ],\n            [\n                0,\n                8.3,\n                0.5\n            ]\n        ],\n        \"triggers\": [\n            \"lambda p, h, y: y[5] < 0 and h < 800\",\n            \"lambda p, h, y: y[5] < 0\"\n        ]\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/flights/{{flight_id}}/rocket",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34d957cb-43f8-4459-96da-0b57d0d51bb8",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Flight DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Flight successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_flight_id).to.eql(pm.environment.get('flight_id'), \"flight_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70497555-1ce8-4131-ad01-1b4a9b69ad5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/flights/{{flight_id}}"
					},
					"response": []
				}
			],
			"id": "9ff921fc-87b9-446e-8e9a-6965a984d343"
		},
		{
			"name": "Motor",
			"item": [
				{
					"name": "Create Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f7ecb2-097c-416f-80ce-d7ac3481f51a",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var motorRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save motor parameters",
									"pm.environment.set('motor_id', apiRspn.motor_id)        ",
									"pm.environment.set('burn_time', motorRequest.burn_time)",
									"pm.environment.set('dry_mass', motorRequest.dry_mass)",
									"pm.environment.set('dry_inertia', motorRequest.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', motorRequest.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', motorRequest.grain_number)",
									"pm.environment.set('grain_density', motorRequest.grain_density)",
									"pm.environment.set('grain_outer_radius', motorRequest.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', motorRequest.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', motorRequest.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', motorRequest.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', motorRequest.grain_separation)",
									"pm.environment.set('thrust_source', motorRequest.thrust_source)",
									"pm.environment.set('nozzle_radius', motorRequest.nozzle_radius)",
									"pm.environment.set('throat_radius', motorRequest.throat_radius)",
									"pm.environment.set('interpolation_method', motorRequest.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', motorRequest.coordinate_system_orientation)",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor successfully created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid motor_id\", function () {",
									"        pm.expect(apiRspn.motor_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4dc44462-5577-42b3-9a9a-33359b0c0857",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6da4c1e-21d4-4c5d-8861-b9d57c97cfc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"burn_time\": 3.9,\n    \"dry_mass\": 1.815,\n    \"dry_inertia\": [0.125, 0.125, 0.002],\n    \"center_of_dry_mass_position\": 0.317,\n    \"grain_number\": 5,\n    \"grain_density\": 1815,\n    \"grain_outer_radius\": 0.033,\n    \"grain_initial_inner_radius\": 0.015,\n    \"grain_initial_height\": 0.12,\n    \"grains_center_of_mass_position\": -0.85704,\n    \"grain_separation\": 0.005,\n    \"thrust_source\": \"Cesaroni_M1670\",            \n    \"nozzle_radius\": 0.033,\n    \"throat_radius\": 0.011,\n    \"interpolation_method\": \"linear\",\n    \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/motors/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cb6e953-6be6-4c08-80fc-12e2f8356e21",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });    ",
									"    pm.test(bdd + \" then response must contain a valid motor\", function () {",
									"        pm.expect(apiRspn.burn_time).to.eql(pm.environment.get('burn_time'), \"motor burn_time not matching\");",
									"        pm.expect(apiRspn.dry_mass).to.eql(pm.environment.get('dry_mass'), \"motor dry_mass not matching\");",
									"        pm.expect(apiRspn.dry_inertia).to.eql(pm.environment.get('dry_inertia'), \"motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.center_of_dry_mass_position).to.eql(pm.environment.get('center_of_dry_mass_position'), \"motor center_of_dry_mass_position not matching\");",
									"        pm.expect(apiRspn.grain_number).to.eql(pm.environment.get('grain_number'), \"motor grain_number not matching\");",
									"        pm.expect(apiRspn.grain_density).to.eql(pm.environment.get('grain_density'), \"motor grain_density not matching\");",
									"        pm.expect(apiRspn.grain_outer_radius).to.eql(pm.environment.get('grain_outer_radius'), \"motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.grain_initial_inner_radius).to.eql(pm.environment.get('grain_initial_inner_radius'), \"motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.grain_initial_height).to.eql(pm.environment.get('grain_initial_height'), \"motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.grains_center_of_mass_position).to.eql(pm.environment.get('grains_center_of_mass_position'), \"motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.thrust_source).to.eql(pm.environment.get('thrust_source'), \"motor thrust_source not matching\");",
									"        pm.expect(apiRspn.grain_separation).to.eql(pm.environment.get('grain_separation'), \"motor grain_separation not matching\");",
									"        pm.expect(apiRspn.nozzle_radius).to.eql(pm.environment.get('nozzle_radius'), \"motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.throat_radius).to.eql(pm.environment.get('throat_radius'), \"motor throat_radius not matching\");",
									"        pm.expect(apiRspn.interpolation_method).to.eql(pm.environment.get('interpolation_method'), \"motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.coordinate_system_orientation).to.eql(pm.environment.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45157046-8d07-445a-968f-db626c0773c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b7a88fe-5b90-4ba3-a7a1-40e6f0b9c363",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Motor GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_motor).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "706e0a88-ffdf-409e-9d0c-debd119f734f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/rocketpy/{{motor_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a35de6a-c957-42c2-a40e-81f5e102c90b",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Motor simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.motor_data).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_burning_time).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_propellant_mass).to.exist;",
									"        pm.expect(apiRspn.motor_data.average_propellant_exhaust_velocity).to.exist;",
									"        pm.expect(apiRspn.motor_data.average_thrust).to.exist;",
									"        pm.expect(apiRspn.motor_data.maximum_thrust).to.exist;",
									"        pm.expect(apiRspn.motor_data.total_impulse).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e0b28e4d-a487-4d14-933c-8244188ef45e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53048249-d34d-4ea3-b262-b0db4edfa408",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var motorRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save motor parameters",
									"pm.environment.set('motor_id', apiRspn.new_motor_id)",
									"pm.environment.set('burn_time', motorRequest.burn_time)",
									"pm.environment.set('dry_mass', motorRequest.dry_mass)",
									"pm.environment.set('dry_inertia', motorRequest.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', motorRequest.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', motorRequest.grain_number)",
									"pm.environment.set('grain_density', motorRequest.grain_density)",
									"pm.environment.set('grain_outer_radius', motorRequest.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', motorRequest.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', motorRequest.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', motorRequest.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', motorRequest.grain_separation)",
									"pm.environment.set('thrust_source', motorRequest.thrust_source)",
									"pm.environment.set('nozzle_radius', motorRequest.nozzle_radius)",
									"pm.environment.set('throat_radius', motorRequest.throat_radius)",
									"pm.environment.set('interpolation_method', motorRequest.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', motorRequest.coordinate_system_orientation)",
									"",
									"//TEST",
									"bdd = \"Given a valid Motor PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid new_motor_id\", function () {",
									"        pm.expect(apiRspn.new_motor_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6794ae0e-2040-4327-88c5-008850deaa76",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "400dec63-44cc-4b05-8624-c566c7795ec2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"burn_time\": 3.9,\n    \"dry_mass\": 1.815,\n    \"dry_inertia\": [0.125, 0.125, 0.002],\n    \"center_of_dry_mass_position\": 0.317,\n    \"grain_number\": 5,\n    \"grain_density\": 1815,\n    \"grain_outer_radius\": 0.033,\n    \"grain_initial_inner_radius\": 0.015,\n    \"grain_initial_height\": 0.12,\n    \"grains_center_of_mass_position\": -0.85704,\n    \"grain_separation\": 0.005,\n    \"thrust_source\": \"Cesaroni_M1670\",            \n    \"nozzle_radius\": 0.033,\n    \"throat_radius\": 0.011,\n    \"interpolation_method\": \"linear\",\n    \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/motors/{{motor_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Motor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f9d5d37-e4ee-47ff-a4cf-e618185aaf54",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Motor DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Motor successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_motor_id).to.eql(pm.environment.get('motor_id'), \"motor_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8227c275-a39d-443e-918a-f9fc0ef923ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/motors/{{motor_id}}"
					},
					"response": []
				}
			],
			"id": "e81ed732-6e7f-4412-830e-ce1dc322ef5c"
		},
		{
			"name": "Rocket",
			"item": [
				{
					"name": "Create Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fafbca0-4516-4e4f-93dd-1081bfafa790",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var rocketRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save rocket parameters",
									"pm.environment.set('rocket_id', apiRspn.rocket_id)",
									"pm.environment.set('radius', rocketRequest.radius)",
									"pm.environment.set('mass', rocketRequest.mass)",
									"pm.environment.set('inertia', rocketRequest.inertia)",
									"pm.environment.set('power_off_drag', rocketRequest.power_off_drag)",
									"pm.environment.set('power_on_drag', rocketRequest.power_on_drag)",
									"pm.environment.set('center_of_mass_without_motor', rocketRequest.center_of_mass_without_motor)",
									"pm.environment.set('motor_position', rocketRequest.motor_position)",
									"pm.environment.set('rail_buttons', rocketRequest.rail_buttons)",
									"pm.environment.set('upper_button_position', rocketRequest.rail_buttons.upper_button_position)",
									"pm.environment.set('lower_button_position', rocketRequest.rail_buttons.lower_button_position)",
									"pm.environment.set('angular_position', rocketRequest.rail_buttons.angular_position)",
									"pm.environment.set('rocket_coordinate_system_orientation', rocketRequest.coordinate_system_orientation)",
									"",
									"// rocket motor",
									"pm.environment.set('burn_time', rocketRequest.motor.burn_time)",
									"pm.environment.set('dry_mass', rocketRequest.motor.dry_mass)",
									"pm.environment.set('dry_inertia', rocketRequest.motor.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', rocketRequest.motor.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', rocketRequest.motor.grain_number)",
									"pm.environment.set('grain_density', rocketRequest.motor.grain_density)",
									"pm.environment.set('grain_outer_radius', rocketRequest.motor.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', rocketRequest.motor.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', rocketRequest.motor.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', rocketRequest.motor.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', rocketRequest.motor.grain_separation)",
									"pm.environment.set('thrust_source', rocketRequest.motor.thrust_source)",
									"pm.environment.set('nozzle_radius', rocketRequest.motor.nozzle_radius)",
									"pm.environment.set('throat_radius', rocketRequest.motor.throat_radius)",
									"pm.environment.set('interpolation_method', rocketRequest.motor.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', rocketRequest.motor.coordinate_system_orientation)",
									"",
									"// rocket nose",
									"pm.environment.set('nose_length', rocketRequest.nose.length)",
									"pm.environment.set('kind', rocketRequest.nose.kind)",
									"pm.environment.set('nose_position', rocketRequest.nose.position)",
									"pm.environment.set('base_radius', rocketRequest.nose.base_radius)",
									"pm.environment.set('rocket_radius', rocketRequest.nose.rocket_radius)",
									"",
									"// rocket fins",
									"pm.environment.set('n', rocketRequest.fins.n)",
									"pm.environment.set('root_chord', rocketRequest.fins.root_chord)",
									"pm.environment.set('tip_chord', rocketRequest.fins.tip_chord)",
									"pm.environment.set('span', rocketRequest.fins.span)",
									"pm.environment.set('fin_position', rocketRequest.fins.position)",
									"pm.environment.set('cant_angle', rocketRequest.fins.cant_angle)",
									"pm.environment.set('fin_radius', rocketRequest.fins.radius)",
									"pm.environment.set('airfoil', rocketRequest.fins.airfoil)",
									"",
									"// rocket tail",
									"pm.environment.set('top_radius', rocketRequest.tail.top_radius)",
									"pm.environment.set('bottom_radius', rocketRequest.tail.bottom_radius)",
									"pm.environment.set('tail_length', rocketRequest.tail.length)",
									"pm.environment.set('tail_position', rocketRequest.tail.position)",
									"pm.environment.set('tail_radius', rocketRequest.tail.radius)",
									"",
									"// rocket parachute",
									"pm.environment.set('parachutes_names', rocketRequest.parachutes.name)",
									"pm.environment.set('parachutes_cds', rocketRequest.parachutes.cd_s)",
									"pm.environment.set('parachutes_sampling_rate', rocketRequest.parachutes.sampling_rate)",
									"pm.environment.set('parachutes_lags', rocketRequest.parachutes.lag)",
									"pm.environment.set('parachutes_noises', rocketRequest.parachutes.noise)",
									"pm.environment.set('parachutes_triggers', rocketRequest.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket POST request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket successfully created\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid rocket_id\", function () {",
									"        pm.expect(apiRspn.rocket_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "68a3d4d7-1c93-4f53-9161-91148d83811e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19aa0642-f83f-46f9-bf4d-e5f6d343bdad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"radius\": 0.0632,\n    \"mass\": 16.235,\n    \"inertia\": [\n        6.321, \n        6.321, \n        0.0346\n    ],\n    \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n    \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n    \"center_of_mass_without_motor\": 0,\n    \"coordinate_system_orientation\": \"tail_to_nose\",\n    \"motor_position\": -1.255,\n    \"rail_buttons\": {\n        \"upper_button_position\": -0.5,\n        \"lower_button_position\": 0.2,\n        \"angular_position\": 45\n    },\n    \"motor\": {\n        \"burn_time\": 3.9,\n        \"dry_mass\": 1.815,\n        \"dry_inertia\": [0.125, 0.125, 0.002],\n        \"center_of_dry_mass_position\": 0.317,\n        \"grain_number\": 5,\n        \"grain_density\": 1815,\n        \"grain_outer_radius\": 0.033,\n        \"grain_initial_inner_radius\": 0.015,\n        \"grain_initial_height\": 0.12,\n        \"grains_center_of_mass_position\": -0.85704,\n        \"grain_separation\": 0.005,\n        \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n        \"nozzle_radius\": 0.033,\n        \"throat_radius\": 0.011,\n        \"interpolation_method\": \"linear\",\n        \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n    },\n    \"nose\": {\n        \"length\": 0.55829,\n        \"kind\": \"vonKarman\",\n        \"position\": 1.278,\n        \"base_radius\": 0.0635,\n        \"rocket_radius\": 0.0635\n    },\n    \"fins\": {\n        \"n\": 4,\n        \"root_chord\": 0.12,\n        \"tip_chord\": 0.04,\n        \"span\": 0.1,\n        \"position\": -1.04956,\n        \"cant_angle\": 0,\n        \"radius\": 0.0635,\n        \"airfoil\": \"\"\n    },\n    \"tail\": {\n        \"top_radius\": 0.0635,\n        \"bottom_radius\": 0.0435,\n        \"length\": 0.06,\n        \"position\": -1.194656,\n        \"radius\": 0.0635\n    },\n    \"parachutes\": {\n        \"name\": [\n            \"Main\",\n            \"Drogue\"\n        ],\n        \"cd_s\": [\n            10,\n            1\n        ],\n        \"sampling_rate\": [\n            105,\n            105\n        ],\n        \"lag\": [\n            1.5,\n            1.5\n        ],\n        \"noise\": [\n            [\n                0,\n                8.3,\n                0.5\n            ],\n            [\n                0,\n                8.3,\n                0.5\n            ]\n        ],\n        \"triggers\": [\n            \"lambda p, h, y: y[5] < 0 and h < 800\",\n            \"lambda p, h, y: y[5] < 0\"\n        ]\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/rockets/",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Read Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b38b3b-44e6-4cea-8a86-ddb1ace14d04",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });    ",
									"    pm.test(bdd + \" then response must contain a valid rocket\", function () {        ",
									"        pm.expect(apiRspn.radius).to.eql(pm.environment.get('radius'), \"rocket radius not matching\");",
									"        pm.expect(apiRspn.mass).to.eql(pm.environment.get('mass'), \"rocket mass not matching\");",
									"        pm.expect(apiRspn.inertia).to.eql(pm.environment.get('inertia'), \"rocket inertia not matching\");",
									"        pm.expect(apiRspn.power_off_drag).to.eql(pm.environment.get('power_off_drag'), \"rocket power_off_drag not matching\");",
									"        pm.expect(apiRspn.power_on_drag).to.eql(pm.environment.get('power_on_drag'), \"rocket power_on_drag not matching\");",
									"        pm.expect(apiRspn.center_of_mass_without_motor).to.eql(pm.environment.get('center_of_mass_without_motor'), \"rocket center_of_mass_without_motor not matching\");",
									"        pm.expect(apiRspn.coordinate_system_orientation).to.eql(pm.environment.get('rocket_coordinate_system_orientation'), \"rocket coordinate_system_orientation not matching\");",
									"        pm.expect(apiRspn.motor_position).to.eql(pm.environment.get('motor_position'), \"rocket motor_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons).to.eql(pm.environment.get('rail_buttons'), \"rocket rail_buttons not matching\");",
									"        pm.expect(apiRspn.rail_buttons.upper_button_position).to.eql(pm.environment.get('upper_button_position'), \"rocket rail_buttons upper_button_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons.lower_button_position).to.eql(pm.environment.get('lower_button_position'), \"rocket rail_buttons lower_button_position not matching\");",
									"        pm.expect(apiRspn.rail_buttons.angular_position).to.eql(pm.environment.get('angular_position'), \"rocket rail_buttons angular_position not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket motor\", function () {",
									"        pm.expect(apiRspn.motor.burn_time).to.eql(pm.environment.get('burn_time'), \"rocket motor burn_time not matching\");",
									"        pm.expect(apiRspn.motor.dry_mass).to.eql(pm.environment.get('dry_mass'), \"rocket motor dry_mass not matching\");",
									"        pm.expect(apiRspn.motor.dry_inertia).to.eql(pm.environment.get('dry_inertia'), \"rocket motor dry_inertia not matching\");",
									"        pm.expect(apiRspn.motor.center_of_dry_mass_position).to.eql(pm.environment.get('center_of_dry_mass_position'), \"rocket motor center_of_dry_mass_position not matching\");",
									"        pm.expect(apiRspn.motor.grain_number).to.eql(pm.environment.get('grain_number'), \"rocket motor grain_number not matching\");",
									"        pm.expect(apiRspn.motor.grain_density).to.eql(pm.environment.get('grain_density'), \"rocket motor grain_density not matching\");",
									"        pm.expect(apiRspn.motor.grain_outer_radius).to.eql(pm.environment.get('grain_outer_radius'), \"rocket motor grain_outer_radius not matching\");",
									"        pm.expect(apiRspn.motor.grain_initial_inner_radius).to.eql(pm.environment.get('grain_initial_inner_radius'), \"rocket motor grain_initial_inner_radius not matching\");",
									"        pm.expect(apiRspn.motor.grain_initial_height).to.eql(pm.environment.get('grain_initial_height'), \"rocket motor grain_initial_height not matching\");",
									"        pm.expect(apiRspn.motor.grains_center_of_mass_position).to.eql(pm.environment.get('grains_center_of_mass_position'), \"rocket motor grains_center_of_mass_position not matching\");",
									"        pm.expect(apiRspn.motor.thrust_source).to.eql(pm.environment.get('thrust_source'), \"rocket motor thrust_source not matching\");",
									"        pm.expect(apiRspn.motor.grain_separation).to.eql(pm.environment.get('grain_separation'), \"rocket motor grain_separation not matching\");",
									"        pm.expect(apiRspn.motor.nozzle_radius).to.eql(pm.environment.get('nozzle_radius'), \"rocket motor nozzle_radius not matching\");",
									"        pm.expect(apiRspn.motor.throat_radius).to.eql(pm.environment.get('throat_radius'), \"rocket motor throat_radius not matching\");",
									"        pm.expect(apiRspn.motor.interpolation_method).to.eql(pm.environment.get('interpolation_method'), \"rocket motor interpolation_method not matching\");",
									"        pm.expect(apiRspn.motor.coordinate_system_orientation).to.eql(pm.environment.get('motor_coordinate_system_orientation'), \"motor coordinate_system_orientation not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket nose\", function () {",
									"        pm.expect(apiRspn.nose.length).to.eql(pm.environment.get('nose_length'), \"rocket nose length not matching\");",
									"        pm.expect(apiRspn.nose.kind).to.eql(pm.environment.get('kind'), \"rocket nose kind not matching\");",
									"        pm.expect(apiRspn.nose.position).to.eql(pm.environment.get('nose_position'), \"rocket nose position not matching\");",
									"        pm.expect(apiRspn.nose.base_radius).to.eql(pm.environment.get('base_radius'), \"rocket nose base_radius not matching\");",
									"        pm.expect(apiRspn.nose.rocket_radius).to.eql(pm.environment.get('rocket_radius'), \"rocket nose rocket_radius not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket fins\", function () {",
									"        pm.expect(apiRspn.fins.n).to.eql(pm.environment.get('n'), \"rocket fins 'n' not matching\");",
									"        pm.expect(apiRspn.fins.root_chord).to.eql(pm.environment.get('root_chord'), \"rocket fins root_chord not matching\");",
									"        pm.expect(apiRspn.fins.tip_chord).to.eql(pm.environment.get('tip_chord'), \"rocket fins tip_chord not matching\");",
									"        pm.expect(apiRspn.fins.span).to.eql(pm.environment.get('span'), \"rocket fins span not matching\");",
									"        pm.expect(apiRspn.fins.position).to.eql(pm.environment.get('fin_position'), \"rocket fins position not matching\");",
									"        pm.expect(apiRspn.fins.cant_angle).to.eql(pm.environment.get('cant_angle'), \"rocket fins cant_angle not matching\");",
									"        pm.expect(apiRspn.fins.radius).to.eql(pm.environment.get('fin_radius'), \"rocket fins radius not matching\");",
									"        pm.expect(apiRspn.fins.airfoil).to.eql(pm.environment.get('airfoil'), \"rocket fins airfoil not matching\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket tail\", function () {",
									"        pm.expect(apiRspn.tail.top_radius).to.eql(pm.environment.get('top_radius'), \"rocket tail top_radius not matching\");        ",
									"        pm.expect(apiRspn.tail.bottom_radius).to.eql(pm.environment.get('bottom_radius'), \"rocket tail bottom_radius not matching\");        ",
									"        pm.expect(apiRspn.tail.length).to.eql(pm.environment.get('tail_length'), \"rocket tail length not matching\");        ",
									"        pm.expect(apiRspn.tail.position).to.eql(pm.environment.get('tail_position'), \"rocket tail position not matching\");        ",
									"        pm.expect(apiRspn.tail.radius).to.eql(pm.environment.get('tail_radius'), \"rocket tail radius not matching\");        ",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid flight rocket parachutes\", function () {",
									"        pm.expect(apiRspn.parachutes.name).to.eql(pm.environment.get('parachutes_names'), \"rocket parachutes names not matching\");                ",
									"        pm.expect(apiRspn.parachutes.cd_s).to.eql(pm.environment.get('parachutes_cds'), \"rocket parachutes cd_s not matching\");                ",
									"        pm.expect(apiRspn.parachutes.sampling_rate).to.eql(pm.environment.get('parachutes_sampling_rate'), \"rocket parachutes sampling_rate not matching\");                ",
									"        pm.expect(apiRspn.parachutes.lag).to.eql(pm.environment.get('parachutes_lags'), \"rocket parachutes lags not matching\");                ",
									"        pm.expect(apiRspn.parachutes.noise).to.eql(pm.environment.get('parachutes_noises'), \"rocket parachutes noises not matching\");",
									"        pm.expect(apiRspn.parachutes.triggers).to.eql(pm.environment.get('parachutes_triggers'), \"rocket parachutes triggers not matching\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7caae40c-c974-40dc-803b-cbcb3944f935",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}"
					},
					"response": []
				},
				{
					"name": "Read rocketpy Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "407e37d9-e54f-4362-a11c-27a3eddb4fa9",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"",
									"//TEST",
									"bdd = \"Given a valid rocketpy Rocket GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.jsonpickle_rocketpy_rocket).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "122a82f4-624d-4017-bd55-6ea0ed176465",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/rocketpy/{{rocket_id}}"
					},
					"response": []
				},
				{
					"name": "Simulate Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffe2d0a5-17b9-4c3e-9711-ec6db6b1164f",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid rocketpy Rocket simulate GET request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.rocket_data).to.exist;",
									"        pm.expect(apiRspn.rocket_data.inertia_details).to.exist;",
									"        pm.expect(apiRspn.rocket_data.inertia_details.rocket_mass_without_propellant).to.exist;",
									"        pm.expect(apiRspn.rocket_data.inertia_details.rocket_mass_with_propellant).to.exist;",
									"        pm.expect(apiRspn.rocket_data.inertia_details.rocket_inertia_with_motor_without_propellant).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters.rocket_maximum_radius).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters.rocket_frontal_area).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters.rocket_codm_nozzle_exit_distance).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters.rocket_codm_center_of_propellant_mass).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_geometrical_parameters.rocket_codm_loaded_center_of_mass).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities.aerodynamics_lift_coefficient_derivatives).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities.aerodynamics_center_of_pressure).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities.distance_cop_to_codm).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities.initial_static_margin).to.exist;",
									"        pm.expect(apiRspn.rocket_data.rocket_aerodynamics_quantities.final_static_margin).to.exist;",
									"        pm.expect(apiRspn.rocket_data.parachute_data).to.exist;",
									"        pm.expect(apiRspn.rocket_data.parachute_data.parachute_details).to.exist;",
									"        pm.expect(apiRspn.rocket_data.parachute_data.parachute_ejection_system_refresh_rate).to.exist;",
									"        pm.expect(apiRspn.rocket_data.parachute_data.parachute_lag).to.exist;",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0a4fb190-7be7-4f84-90e0-df14c6dfa55e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}/simulate"
					},
					"response": []
				},
				{
					"name": "Update Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f7524e-3ea0-4172-8fbd-27854ce7c542",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"var rocketRequest = JSON.parse(pm.request.body.raw);",
									"",
									"// save rocket parameters",
									"pm.environment.set('rocket_id', apiRspn.new_rocket_id)",
									"pm.environment.set('radius', rocketRequest.radius)",
									"pm.environment.set('mass', rocketRequest.mass)",
									"pm.environment.set('inertia', rocketRequest.inertia)",
									"pm.environment.set('power_off_drag', rocketRequest.power_off_drag)",
									"pm.environment.set('power_on_drag', rocketRequest.power_on_drag)",
									"pm.environment.set('center_of_mass_without_motor', rocketRequest.center_of_mass_without_motor)",
									"pm.environment.set('motor_position', rocketRequest.motor_position)",
									"pm.environment.set('rail_buttons', rocketRequest.rail_buttons)",
									"pm.environment.set('upper_button_position', rocketRequest.rail_buttons.upper_button_position)",
									"pm.environment.set('lower_button_position', rocketRequest.rail_buttons.lower_button_position)",
									"pm.environment.set('angular_position', rocketRequest.rail_buttons.angular_position)",
									"pm.environment.set('rocket_coordinate_system_orientation', rocketRequest.coordinate_system_orientation)",
									"",
									"// rocket motor",
									"pm.environment.set('burn_time', rocketRequest.motor.burn_time)",
									"pm.environment.set('dry_mass', rocketRequest.motor.dry_mass)",
									"pm.environment.set('dry_inertia', rocketRequest.motor.dry_inertia)",
									"pm.environment.set('center_of_dry_mass_position', rocketRequest.motor.center_of_dry_mass_position)",
									"pm.environment.set('grain_number', rocketRequest.motor.grain_number)",
									"pm.environment.set('grain_density', rocketRequest.motor.grain_density)",
									"pm.environment.set('grain_outer_radius', rocketRequest.motor.grain_outer_radius)",
									"pm.environment.set('grain_initial_inner_radius', rocketRequest.motor.grain_initial_inner_radius)",
									"pm.environment.set('grain_initial_height', rocketRequest.motor.grain_initial_height)",
									"pm.environment.set('grains_center_of_mass_position', rocketRequest.motor.grains_center_of_mass_position)",
									"pm.environment.set('grain_separation', rocketRequest.motor.grain_separation)",
									"pm.environment.set('thrust_source', rocketRequest.motor.thrust_source)",
									"pm.environment.set('nozzle_radius', rocketRequest.motor.nozzle_radius)",
									"pm.environment.set('throat_radius', rocketRequest.motor.throat_radius)",
									"pm.environment.set('interpolation_method', rocketRequest.motor.interpolation_method)",
									"pm.environment.set('motor_coordinate_system_orientation', rocketRequest.motor.coordinate_system_orientation)",
									"",
									"// rocket nose",
									"pm.environment.set('nose_length', rocketRequest.nose.length)",
									"pm.environment.set('kind', rocketRequest.nose.kind)",
									"pm.environment.set('nose_position', rocketRequest.nose.position)",
									"pm.environment.set('base_radius', rocketRequest.nose.base_radius)",
									"pm.environment.set('rocket_radius', rocketRequest.nose.rocket_radius)",
									"",
									"// rocket fins",
									"pm.environment.set('n', rocketRequest.fins.n)",
									"pm.environment.set('root_chord', rocketRequest.fins.root_chord)",
									"pm.environment.set('tip_chord', rocketRequest.fins.tip_chord)",
									"pm.environment.set('span', rocketRequest.fins.span)",
									"pm.environment.set('fin_position', rocketRequest.fins.position)",
									"pm.environment.set('cant_angle', rocketRequest.fins.cant_angle)",
									"pm.environment.set('fin_radius', rocketRequest.fins.radius)",
									"pm.environment.set('airfoil', rocketRequest.fins.airfoil)",
									"",
									"// rocket tail",
									"pm.environment.set('top_radius', rocketRequest.tail.top_radius)",
									"pm.environment.set('bottom_radius', rocketRequest.tail.bottom_radius)",
									"pm.environment.set('tail_length', rocketRequest.tail.length)",
									"pm.environment.set('tail_position', rocketRequest.tail.position)",
									"pm.environment.set('tail_radius', rocketRequest.tail.radius)",
									"",
									"// rocket parachute",
									"pm.environment.set('parachutes_names', rocketRequest.parachutes.name)",
									"pm.environment.set('parachutes_cds', rocketRequest.parachutes.cd_s)",
									"pm.environment.set('parachutes_sampling_rate', rocketRequest.parachutes.sampling_rate)",
									"pm.environment.set('parachutes_lags', rocketRequest.parachutes.lag)",
									"pm.environment.set('parachutes_noises', rocketRequest.parachutes.noise)",
									"pm.environment.set('parachutes_triggers', rocketRequest.parachutes.triggers)",
									"",
									"//TEST",
									"bdd = \"Given a valid Rocket PUT request is made to the API\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket successfully updated\");",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid rocket_id\", function () {",
									"        pm.expect(apiRspn.new_rocket_id).to.exist;        ",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "853decf0-3e5e-4786-b9e8-97c53590ef44",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5322fc32-9d1a-4d30-94d9-a29ffa58cc1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"radius\": 0.0632,\n    \"mass\": 16.235,\n    \"inertia\": [\n        6.321, \n        6.321, \n        0.0346\n    ],\n    \"power_off_drag\": \"lib/data/calisto/powerOffDragCurve.csv\",\n    \"power_on_drag\": \"lib/data/calisto/powerOnDragCurve.csv\",\n    \"center_of_mass_without_motor\": 0,\n    \"coordinate_system_orientation\": \"tail_to_nose\",\n    \"motor_position\": -1.255,\n    \"rail_buttons\": {\n        \"upper_button_position\": -0.5,\n        \"lower_button_position\": 0.2,\n        \"angular_position\": 45\n    },\n    \"motor\": {\n        \"burn_time\": 3.9,\n        \"dry_mass\": 1.815,\n        \"dry_inertia\": [0.125, 0.125, 0.002],\n        \"center_of_dry_mass_position\": 0.317,\n        \"grain_number\": 5,\n        \"grain_density\": 1815,\n        \"grain_outer_radius\": 0.033,\n        \"grain_initial_inner_radius\": 0.015,\n        \"grain_initial_height\": 0.12,\n        \"grains_center_of_mass_position\": -0.85704,\n        \"grain_separation\": 0.005,\n        \"thrust_source\": \"lib/data/motors/Cesaroni_M1670.eng\",            \n        \"nozzle_radius\": 0.033,\n        \"throat_radius\": 0.011,\n        \"interpolation_method\": \"linear\",\n        \"coordinate_system_orientation\": \"nozzle_to_combustion_chamber\"\n    },\n    \"nose\": {\n        \"length\": 0.55829,\n        \"kind\": \"vonKarman\",\n        \"position\": 1.278,\n        \"base_radius\": 0.0635,\n        \"rocket_radius\": 0.0635\n    },\n    \"fins\": {\n        \"n\": 4,\n        \"root_chord\": 0.12,\n        \"tip_chord\": 0.04,\n        \"span\": 0.1,\n        \"position\": -1.04956,\n        \"cant_angle\": 0,\n        \"radius\": 0.0635,\n        \"airfoil\": \"\"\n    },\n    \"tail\": {\n        \"top_radius\": 0.0635,\n        \"bottom_radius\": 0.0435,\n        \"length\": 0.06,\n        \"position\": -1.194656,\n        \"radius\": 0.0635\n    },\n    \"parachutes\": {\n        \"name\": [\n            \"Main\",\n            \"Drogue\"\n        ],\n        \"cd_s\": [\n            10,\n            1\n        ],\n        \"sampling_rate\": [\n            105,\n            105\n        ],\n        \"lag\": [\n            1.5,\n            1.5\n        ],\n        \"noise\": [\n            [\n                0,\n                8.3,\n                0.5\n            ],\n            [\n                0,\n                8.3,\n                0.5\n            ]\n        ],\n        \"triggers\": [\n            \"lambda p, h, y: y[5] < 0 and h < 800\",\n            \"lambda p, h, y: y[5] < 0\"\n        ]\n    }    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{endpoint}}/rockets/{{rocket_id}}",
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Delete Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e8c0250-b7b9-46d0-beed-300c8b6e90a9",
								"exec": [
									"//Fixes the issue of breaking the collection runner whenever an http 500 is received",
									"if (responseCode.code == 500) {",
									"    pm.test(\"Given a request is made then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    return",
									"}",
									"",
									"var apiRspn = pm.response.json();",
									"//TEST",
									"bdd = \"Given a valid Rocket DELETE request is made\";",
									"    pm.test(bdd + \" then response must return a 200 status code\", function () {",
									"        pm.expect(responseCode.code).to.eql(200);",
									"    });",
									"    pm.test(bdd + \" then response must contain a valid message\", function () {",
									"        pm.expect(apiRspn.message).to.eql(\"Rocket successfully deleted\", \"message not matching\");",
									"        pm.expect(apiRspn.deleted_rocket_id).to.eql(pm.environment.get('rocket_id'), \"rocket_id not matching\");                ",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d522ed4b-2c05-4d82-90c4-e7f86495e502",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{endpoint}}/rockets/{{rocket_id}}"
					},
					"response": []
				}
			],
			"id": "de99d86c-c3ee-4590-a0e2-eddff4594023"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fee80996-5ead-4e76-a099-ef0206e436f9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "edd30d7a-90b0-45c5-8491-178d18175aec",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "env_id",
			"value": ""
		},
		{
			"key": "latitude",
			"value": ""
		},
		{
			"key": "longitude",
			"value": ""
		},
		{
			"key": "elevation",
			"value": ""
		},
		{
			"key": "standard_atmosphere",
			"value": ""
		},
		{
			"key": "atmospheric_model_type",
			"value": ""
		},
		{
			"key": "atmospheric_model_file",
			"value": ""
		},
		{
			"key": "date",
			"value": ""
		},
		{
			"key": "rail_length",
			"value": ""
		},
		{
			"key": "inclination",
			"value": ""
		},
		{
			"key": "heading",
			"value": ""
		},
		{
			"key": "flight_id",
			"value": ""
		},
		{
			"key": "radius",
			"value": ""
		},
		{
			"key": "mass",
			"value": ""
		},
		{
			"key": "inertia",
			"value": ""
		},
		{
			"key": "power_off_drag",
			"value": ""
		},
		{
			"key": "power_on_drag",
			"value": ""
		},
		{
			"key": "center_of_mass_without_motor",
			"value": ""
		},
		{
			"key": "motor_position",
			"value": ""
		},
		{
			"key": "rail_buttons",
			"value": ""
		},
		{
			"key": "upper_button_position",
			"value": ""
		},
		{
			"key": "lower_button_position",
			"value": ""
		},
		{
			"key": "angular_position",
			"value": ""
		},
		{
			"key": "burn_time",
			"value": ""
		},
		{
			"key": "dry_mass",
			"value": ""
		},
		{
			"key": "dry_inertia",
			"value": ""
		},
		{
			"key": "center_of_dry_mass_position",
			"value": ""
		},
		{
			"key": "grain_number",
			"value": ""
		},
		{
			"key": "grain_density",
			"value": ""
		},
		{
			"key": "grain_outer_radius",
			"value": ""
		},
		{
			"key": "grain_initial_inner_radius",
			"value": ""
		},
		{
			"key": "grain_initial_height",
			"value": ""
		},
		{
			"key": "grains_center_of_mass_position",
			"value": ""
		},
		{
			"key": "grain_separation",
			"value": ""
		},
		{
			"key": "thrust_source",
			"value": ""
		},
		{
			"key": "nozzle_radius",
			"value": ""
		},
		{
			"key": "throat_radius",
			"value": ""
		},
		{
			"key": "interpolation_method",
			"value": ""
		},
		{
			"key": "coordinate_system_orientation",
			"value": ""
		},
		{
			"key": "length",
			"value": ""
		},
		{
			"key": "kind",
			"value": ""
		},
		{
			"key": "position",
			"value": ""
		},
		{
			"key": "base_radius",
			"value": ""
		},
		{
			"key": "rocket_radius",
			"value": ""
		},
		{
			"key": "n",
			"value": ""
		},
		{
			"key": "root_chord",
			"value": ""
		},
		{
			"key": "tip_chord",
			"value": ""
		},
		{
			"key": "span",
			"value": ""
		},
		{
			"key": "cant_angle",
			"value": ""
		},
		{
			"key": "airfoil",
			"value": ""
		},
		{
			"key": "top_radius",
			"value": ""
		},
		{
			"key": "bottom_radius",
			"value": ""
		},
		{
			"key": "parachutes_names",
			"value": ""
		},
		{
			"key": "parachutes_cds",
			"value": ""
		},
		{
			"key": "parachutes_sampling_rate",
			"value": ""
		},
		{
			"key": "parachutes_lags",
			"value": ""
		},
		{
			"key": "parachutes_noises",
			"value": ""
		},
		{
			"key": "parachutes_triggers",
			"value": ""
		},
		{
			"key": "nose_length",
			"value": ""
		},
		{
			"key": "nose_position",
			"value": ""
		},
		{
			"key": "fin_position",
			"value": ""
		},
		{
			"key": "fin_radius",
			"value": ""
		},
		{
			"key": "tail_length",
			"value": ""
		},
		{
			"key": "tail_position",
			"value": ""
		},
		{
			"key": "tail_radius",
			"value": ""
		},
		{
			"key": "rocket_coordinate_system_orientation",
			"value": ""
		},
		{
			"key": "motor_coordinate_system_orientation",
			"value": ""
		},
		{
			"key": "motor_id",
			"value": ""
		},
		{
			"key": "rocket_id",
			"value": ""
		}
	]
}